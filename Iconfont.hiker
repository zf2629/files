海阔视界规则分享，当前分享的是：小程序￥home_rule_v2￥base64://@Iconfont@{"last_chapter_rule":"","title":"Iconfont","author":"ZF","url":"https://www.iconfont.cn/api/collections.json?type=fyclass&sort=fysort&limit=8&page=fypage","version":1,"col_type":"movie_3","class_name":"所有图标库&官方图标库&多色图标库&单色图标库","type":"other","class_url":"3&1&2&4","area_name":"","area_url":"","sort_name":"时间&点赞数&收藏数&图标数&访问量","year_name":"","sort_url":"time&like&favorite&icon&visit","year_url":"","find_rule":"js:\n$.require('hiker://page/Iconfont').baseParse()","search_url":"","group":"工具","searchFind":"","detail_col_type":"movie_1","detail_find_rule":"","sdetail_col_type":"movie_1","sdetail_find_rule":"","ua":"mobile","preRule":"","pages":"[{\"name\":\"Iconfont\",\"path\":\"Iconfont\",\"rule\":\"const Iconfont = {\\n    empty: 'hiker://empty',\\n    d: [],\\n    files: {\\n        likes: \\\"hiker://files/rules/js/TyrantGenesis_Iconfont收藏.js\\\",\\n    },\\n    collectionListParse: (list) => {\\n        list.forEach(item => {\\n            Iconfont.d.push(\\n                {\\n                    title: item.User.nickname,\\n                    url: $(Iconfont.empty).rule((id) => {\\n                        const Iconfont = $.require('hiker://page/Iconfont')\\n                        Iconfont.userParse(id)\\n                        setResult(Iconfont.d)\\n                    }, item.User.id),\\n                    pic_url: 'https:'+item.User.avatar+'@Referer=https://www.iconfont.cn/',\\n                    col_type: 'avatar',\\n                },\\n                {\\n                    title: '图标集：'+item.name,\\n                    url: $(Iconfont.empty).rule((id) => {\\n                        const Iconfont = $.require('hiker://page/Iconfont')\\n                        Iconfont.collectionParse(id)\\n                        setResult(Iconfont.d)\\n                    }, item.id),\\n                    col_type: 'text_1',\\n                    extra: {\\n                        lineVisible: false,\\n                    },\\n                }\\n            )\\n            item.icons.forEach(icon => {\\n                let svg_url = 'https://iconfont.tyrantg.com/api/illustrate.svg?svg_string='+encodeURIComponent(icon.show_svg)\\n                Iconfont.d.push({\\n                    title: icon.name,\\n                    url: $(Iconfont.empty).rule((name, show_svg) => {\\n                        const Iconfont = $.require('hiker://page/Iconfont')\\n                        Iconfont.iconParse(name, show_svg)\\n                        setResult(Iconfont.d)\\n                    }, icon.name, icon.show_svg),\\n                    pic_url: svg_url,\\n                    col_type: 'icon_5',\\n                })\\n            })\\n            Iconfont.d.push({\\n                col_type: 'line_blank'\\n            })\\n        })\\n    },\\n    userParse: (uid) => {\\n        const url = 'https://www.iconfont.cn/api/user/collections.json?uid='+uid+'&type=icon'\\n        const json = JSON.parse(fetch(url))\\n        const list = json.data.collections\\n\\n        list.forEach(item => {\\n            if (item.has_secret === 0) {\\n                Iconfont.d.push({\\n                    title: '图标集：'+item.name,\\n                    url: $(Iconfont.empty).rule((id) => {\\n                        const Iconfont = $.require('hiker://page/Iconfont')\\n                        Iconfont.collectionParse(id)\\n                        setResult(Iconfont.d)\\n                    }, item.id),\\n                    col_type: 'text_1',\\n                    extra: {\\n                        lineVisible: false,\\n                    },\\n                })\\n                item.icons.forEach(icon => {\\n                    let svg_url = 'https://iconfont.tyrantg.com/api/illustrate.svg?svg_string='+encodeURIComponent(icon.show_svg)\\n                    Iconfont.d.push({\\n                        title: icon.name,\\n                        url: $(Iconfont.empty).rule((name, show_svg) => {\\n                            const Iconfont = $.require('hiker://page/Iconfont')\\n                            Iconfont.iconParse(name, show_svg)\\n                            setResult(Iconfont.d)\\n                        }, icon.name, icon.show_svg),\\n                        pic_url: svg_url,\\n                        col_type: 'icon_5',\\n                    })\\n                })\\n                Iconfont.d.push({\\n                    col_type: 'line_blank'\\n                })\\n            }\\n        })\\n    },\\n    iconParse: (name, svg_url) => {\\n        let true_svg_url = 'https://iconfont.tyrantg.com/api/illustrate.svg?svg_string='+encodeURIComponent(svg_url)\\n        Iconfont.d.push(\\n            {\\n                url: 'copy://'+true_svg_url,\\n                pic_url: true_svg_url,\\n                col_type: 'pic_1_full',\\n            },\\n            {\\n                title: '复制图标',\\n                url: 'copy://'+true_svg_url,\\n                col_type: 'text_center_1',\\n            },\\n            {\\n                title: '复制SVG',\\n                url: 'copy://'+svg_url,\\n                col_type: 'text_center_1',\\n            },\\n            {\\n                title: '收藏图标',\\n                url: $(true_svg_url).lazyRule((name, svg_url) => {\\n                    const Iconfont = $.require('hiker://page/Iconfont')\\n                    let attention = name+'$$$'+svg_url\\n\\n                    if (! fileExist(Iconfont.files.likes)) {\\n                        writeFile(Iconfont.files.likes, attention)\\n                    } else {\\n                        writeFile(Iconfont.files.likes, fetch(Iconfont.files.likes)+\\\"\\\\n\\\"+attention)\\n                    }\\n                    refreshPage(false)\\n                    return \\\"toast://收藏成功\\\"\\n                }, name, svg_url),\\n                col_type: 'text_center_1',\\n            },\\n        )\\n    },\\n    collectionParse: (id) => {\\n        const url = 'https://www.iconfont.cn/api/collection/detail.json?id='+id\\n        const json = JSON.parse(fetch(url))\\n        const list = json.data.icons\\n\\n        list.forEach(icon => {\\n            let svg_url = 'https://iconfont.tyrantg.com/api/illustrate.svg?svg_string='+encodeURIComponent(icon.show_svg)\\n            Iconfont.d.push({\\n                title: icon.name,\\n                url: $(Iconfont.empty).rule((name, show_svg) => {\\n                    const Iconfont = $.require('hiker://page/Iconfont')\\n                    Iconfont.iconParse(name, show_svg)\\n                    setResult(Iconfont.d)\\n                }, icon.name, icon.show_svg),\\n                pic_url: svg_url,\\n                col_type: 'icon_5',\\n            })\\n        })\\n    },\\n    baseParse: () => {\\n        const json = JSON.parse(getResCode())\\n\\n        if (parseInt(MY_PAGE) === 1) {\\n            Iconfont.d.push(\\n                {\\n                    url: $(Iconfont.empty+\\\"#fullTheme#$$fypage\\\").rule(() => {\\n                        const Iconfont = $.require('hiker://page/Iconfont')\\n                        Iconfont.iconSearchParse()\\n                        setResult(Iconfont.d)\\n                    }),\\n                    pic_url: 'https://iconfont.tyrantg.com/search.svg',\\n                    title: '单图标搜索',\\n                    col_type: \\\"icon_4\\\",\\n                },\\n                {\\n                    url: $(Iconfont.empty+\\\"#fullTheme#$$fypage\\\").rule(() => {\\n                        const Iconfont = $.require('hiker://page/Iconfont')\\n                        Iconfont.collectionSearchParse()\\n                        setResult(Iconfont.d)\\n                    }),\\n                    pic_url: 'https://iconfont.tyrantg.com/collection.svg',\\n                    title: '图标集搜索',\\n                    col_type: \\\"icon_4\\\",\\n                },\\n                {\\n                    url: $(Iconfont.empty).rule(() => {\\n                        const Iconfont = $.require('hiker://page/Iconfont')\\n                        Iconfont.likesParse()\\n                        setResult(Iconfont.d)\\n                    }),\\n                    pic_url: 'https://iconfont.tyrantg.com/like.svg',\\n                    title: '收藏图标',\\n                    col_type: \\\"icon_4\\\",\\n                },\\n                // {\\n                //     url: $(Iconfont.empty+\\\"#fullTheme#$$fypage\\\").rule(() => {\\n                //         const Iconfont = $.require('hiker://page/Iconfont')\\n                //         Iconfont.likesParse()\\n                //         setResult(Iconfont.d)\\n                //     }),\\n                //     pic_url: 'https://iconfont.tyrantg.com/tool.svg',\\n                //     title: '工具',\\n                //     col_type: \\\"icon_4\\\",\\n                // },\\n                {\\n                    col_type: 'line_blank'\\n                }\\n            )\\n        }\\n\\n        Iconfont.collectionListParse(json.data.lists)\\n        setResult(Iconfont.d)\\n    },\\n    collectionSearchParse: () => {\\n        addListener('onClose', $.toString(() => {\\n            clearItem('searchValue')\\n        }))\\n\\n        const page = MY_URL.split('$$')[1]\\n\\n        if (parseInt(page) === 1) {\\n            Iconfont.d.push({\\n                title: '搜索',\\n                url: $.toString(() => {\\n                    setItem('searchValue', input)\\n                    refreshPage(false)\\n                    return \\\"hiker://empty\\\"\\n                }),\\n                desc: '请输入关键词',\\n                col_type: 'input',\\n                extra: {\\n                    defaultValue: getItem('searchValue', ''),\\n                    onChange: $.toString(() => {\\n                        if (getItem('searchValue', '') && !input) {\\n                            clearItem('searchValue')\\n                            refreshPage(false)\\n                            return \\\"hiker://empty\\\"\\n                        }\\n                    })\\n                }\\n            })\\n        }\\n\\n        const url = 'https://www.iconfont.cn/api/collections.json?type=3&sort=time&limit=8&page='+page+'&keyword='+getItem('searchValue', '')\\n        const json = JSON.parse(fetch(url))\\n        Iconfont.collectionListParse(json.data.lists)\\n        setResult(Iconfont.d)\\n    },\\n    iconSearchParse: () => {\\n        addListener('onClose', $.toString(() => {\\n            clearItem('searchValue')\\n        }))\\n\\n        const page = MY_URL.split('$$')[1]\\n\\n        if (parseInt(page) === 1) {\\n            Iconfont.d.push({\\n                title: '搜索',\\n                url: $.toString(() => {\\n                    setItem('searchValue', input)\\n                    refreshPage(false)\\n                    return \\\"hiker://empty\\\"\\n                }),\\n                desc: '请输入关键词',\\n                col_type: 'input',\\n                extra: {\\n                    defaultValue: getItem('searchValue', ''),\\n                    onChange: $.toString(() => {\\n                        if (getItem('searchValue', '') && !input) {\\n                            clearItem('searchValue')\\n                            refreshPage(false)\\n                            return \\\"hiker://empty\\\"\\n                        }\\n                    })\\n                }\\n            })\\n        }\\n\\n        if (getItem('searchValue', '') !== '') {\\n            const json = JSON.parse(fetch('https://www.iconfont.cn/api/icon/search.json', {\\n                headers: {\\n                    Cookie: 'ctoken=ctoken;',\\n                },\\n                method: 'POST',\\n                body: {\\n                    q: getItem('searchValue', ''),\\n                    sortType: 'updated_at',\\n                    page: page,\\n                    pageSize: 60,\\n                    ctoken: 'ctoken',\\n                }\\n            }))\\n\\n            const list = json.data.icons\\n\\n            list.forEach(icon => {\\n                let svg_url = 'https://iconfont.tyrantg.com/api/illustrate.svg?svg_string='+encodeURIComponent(icon.show_svg)\\n                Iconfont.d.push({\\n                    title: icon.name,\\n                    url: $(Iconfont.empty).rule((name, show_svg) => {\\n                        const Iconfont = $.require('hiker://page/Iconfont')\\n                        Iconfont.iconParse(name, show_svg)\\n                        setResult(Iconfont.d)\\n                    }, icon.name, icon.show_svg),\\n                    pic_url: svg_url,\\n                    col_type: 'icon_5',\\n                })\\n            })\\n        }\\n    },\\n    likesParse: () => {\\n        const list = fetch(Iconfont.files.likes).split(\\\"\\\\n\\\")\\n\\n        list.forEach((icon, index) => {\\n            if (icon) {\\n                let [name, svg] = icon.split('$$$')\\n                let svg_url = 'https://iconfont.tyrantg.com/api/illustrate.svg?svg_string='+encodeURIComponent(svg)\\n\\n                Iconfont.d.push({\\n                    title: name,\\n                    url: $(Iconfont.empty).rule((name, svg) => {\\n                        const Iconfont = $.require('hiker://page/Iconfont')\\n                        Iconfont.iconParse(name, svg)\\n                        setResult(Iconfont.d)\\n                    }, name, svg),\\n                    pic_url: svg_url,\\n                    col_type: 'icon_5',\\n                    extra: {\\n                        longClick: [\\n                            {\\n                                title: '置顶图标',\\n                                js: $.toString((list, index) => {\\n                                    const Iconfont = $.require('hiker://page/Iconfont')\\n                                    const current = list[index]\\n                                    list.splice(index, 1)\\n                                    list.unshift(current)\\n                                    writeFile(Iconfont.files.likes, list.join(\\\"\\\\n\\\"))\\n                                    refreshPage(false)\\n                                    return \\\"toast://置顶成功\\\"\\n                                }, list, index)\\n                            },\\n                            {\\n                                title: '取消收藏',\\n                                js: $.toString((list, index) => {\\n                                    const Iconfont = $.require('hiker://page/Iconfont')\\n                                    list.splice(index, 1)\\n                                    writeFile(Iconfont.files.likes, list.join(\\\"\\\\n\\\"))\\n                                    refreshPage(false)\\n                                    return \\\"toast://取消成功\\\"\\n                                }, list, index)\\n                            },\\n                        ],\\n                    },\\n                })\\n            }\\n        })\\n    },\\n    toolParse: () => {\\n\\n    },\\n}\\n\\n$.exports = Iconfont\\n\"}]","icon":"https://iconfont.tyrantg.com/icon.svg","proxy":""}