海阔视界规则分享，当前分享的是：小程序￥home_rule_v2￥base64://@听书合集@{"last_chapter_rule":"","title":"听书合集","author":"ZF","url":"hiker://empty","version":96,"col_type":"icon_round_small_4","class_name":"","type":"all","class_url":"","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:\nconst QING_TITLE = getMyVar('myCollection'),\n    newWindow = readFile('newWindow'),\n    typeShow = getMyVar('typeShow', ''),\n    types = {\n        '': '全部',\n        'all': '聚合',\n        'video': '视频',\n        'music': '音频',\n        'live': '直播',\n        'cartoon': '漫画',\n        'read': '阅读',\n        'picture': '图集',\n        'news': '资讯',\n        'tool': '工具',\n        'other': '其它'\n    }\nlet el = [{\n        title: ' ' + QING_TITLE.bold() + ' &nbsp &nbsp ' + '⚙ 轻合集设置 ⚙'.small(),\n        url: 'hiker://page/Config?rule=' + QING_TITLE + '&#noRecordHistory#',\n        img: MY_RULE.icon || 'hiker://images/icon1',\n        col_type: 'avatar'\n    }, {\n        url: '\"hiker://search?s=\"+input',\n        desc: '搜你想要的...',\n        title: '搜索',\n        col_type: 'input',\n        extra: {\n            rules: $.toString((QING_TITLE, typeShow) => {\n                let rules = $.require('hiker://page/dataLoad?rule=' + QING_TITLE)()\n                if (typeShow) rules = rules.filter((v) => v.type == typeShow)\n                return JSON.stringify(rules)\n            }, QING_TITLE, typeShow),\n            defaultValue: getMyVar('searchKey', ''),\n            onChange: \"putMyVar('searchKey',input)\"\n        }\n    }],\n    rules = $.require('hiker://page/dataLoad?rule=' + QING_TITLE)()\nfor (let k in types)\n    if (!k || rules.find((v) => v.type == k))\n        el.push({\n            title: '““””' + (k == typeShow ? types[k].bold().fontcolor('#12b668') : types[k]),\n            url: k == typeShow ? 'hiker://empty' : $('#noLoading#').lazyRule((k) => {\n                putMyVar('typeShow', k)\n                refreshPage(false)\n                return 'hiker://empty'\n            }, k),\n            col_type: 'scroll_button'\n        })\n\neval(JSON.parse(fetch('hiker://page/urlParse?rule=' + QING_TITLE)).rule)\nif (typeShow) rules = rules.filter((v) => v.type == typeShow)\nrules.forEach((v) => {\n    let urlParam = v.url.split(';'),\n        ruleTmp = {\n            title: v.title,\n            url: urlParam.shift(),\n            class_name: v.class_name,\n            class_url: v.class_url,\n            area_name: v.area_name,\n            area_url: v.area_url,\n            year_name: v.year_name,\n            year_url: v.year_url,\n            sort_name: v.sort_name,\n            sort_url: v.sort_url\n        },\n        fypage = ruleTmp.url.includes('fypage') ? 'fypage' : '1',\n        domain = (/(https?:\\/\\/.+?)(?:\\/|$)/i.exec(ruleTmp.url) || [, 'hiker://empty'])[1],\n        d = {\n            title: v.title,\n            url: 'hiker://page/frameLoad',\n            img: v.icon || 'hiker://images/icon1',\n            extra: {\n                url: domain + '/#noHistory##noRecordHistory####' + JSON.stringify({\n                    RULE: base64Encode(JSON.stringify(ruleTmp)),\n                    pageNum: fypage,\n                    QING_TITLE: getMyVar('myCollection')\n                }) + '.js:eval(JSON.parse(fetch(\"hiker://page/urlParse？？rule=' + QING_TITLE + '\")).rule)；；indexUrl(input);' + paramHandle(urlParam, v.ua),\n                RULE: {\n                    title: v.title\n                },\n                isIndex: true\n            }\n        }\n    if (newWindow) Object.assign(d.extra, {\n        newWindow: true,\n        windowId: QING_TITLE + '_' + d.title\n    })\n    el.push(d)\n})\nsetResult(el)","search_url":"hiker://empty?keyword=**","group":"合集","searchFind":"js:\nsetResult([{\n    title: \"点我开始轻合集•视界聚搜\",\n    url: \"hiker://search?s=\" + getParam(\"keyword\"),\n    extra: {\n        rules: $.toString(() => {\n            const QING_TITLE = getMyVar('myCollection'),\n                typeShow = getMyVar('typeShow', '')\n            let rules = $.require('hiker://page/dataLoad?rule=' + QING_TITLE)()\n            if (typeShow) rules = rules.filter((v) => v.type == typeShow)\n            return JSON.stringify(rules)\n        })\n    }\n}])\n","detail_col_type":"movie_1","detail_find_rule":"","sdetail_col_type":"movie_1","sdetail_find_rule":"","ua":"auto","preRule":"putMyVar('myCollection', MY_RULE.title)\nputMyVar('remoteUrl', 'hiker://page/data')\n// \n/*\n*/\n\n\n","pages":"[{\"col_type\":\"text_1\",\"name\":\"ClassTab\",\"path\":\"ClassTab\",\"rule\":\"const ClassTab = function(classArray, params) {\\n    Object.assign(this, params)\\n    this.arr = classArray.map(v => this.init(v))\\n    this.sign = '$' + QING_TITLE + '_' + (this.name || '') + '_'\\n    this.color = this.color || '#12b668'\\n    this.boundary = this.boundary || 'blank_block'\\n}\\nClassTab.prototype = {\\n    constructor: ClassTab,\\n    load(el) {\\n        let folded = this.fold && getVar('fold_' + this.sign, '')\\n        if (this.arr.length > 1 && this.fold) el.push({\\n            title: '““””' + (folded ? '▶' : '▼').fontcolor('#049eff'),\\n            url: $('#noLoading#').lazyRule((sign, folded) => {\\n                putVar('fold_' + sign, { '': 'T', 'T': '' } [folded])\\n                refreshPage(false)\\n                return 'hiker://empty'\\n            }, this.sign, folded),\\n            col_type: 'scroll_button'\\n        })\\n        let arr = folded ? [this.arr[0]] : this.arr\\n        arr.forEach((v) => {\\n            let { id, class_name, class_url } = v,\\n            selected = JSON.stringify(this.getClass(id))\\n            class_name.forEach((name, i) => {\\n                let url = class_url[i],\\n                    now = JSON.stringify({ name: name, url: url })\\n                el.push({\\n                    title: selected == now ? '““””' + name.fontcolor(this.color).bold() : name,\\n                    url: selected == now ? 'hiker://empty' : $('#noLoading#').lazyRule((sign, id, now) => {\\n                        putVar(sign + id, now)\\n                        refreshPage(false)\\n                        return 'hiker://empty'\\n                    }, this.sign, id, now),\\n                    col_type: 'scroll_button'\\n                })\\n            })\\n            el.push({ col_type: this.boundary })\\n        })\\n    },\\n    init(classObject) {\\n        if (typeof classObject.class_name == 'string')\\n            classObject.class_name = classObject.class_name.split('&')\\n        if (typeof classObject.class_url == 'string')\\n            classObject.class_url = classObject.class_url.split('&').map((v) => v.trim())\\n        return classObject\\n    },\\n    push(classObject) {\\n        this.arr.push(this.init(classObject))\\n    },\\n    getClass(id) {\\n        let defaultClass = this.arr.find(item => item.id == id)\\n        defaultClass = JSON.stringify(defaultClass ? {\\n            name: defaultClass.class_name[0],\\n            url: defaultClass.class_url[0]\\n        } : { name:  'cannot find id: ' + id + ' in classTab: ' + this.sign, url: ''})\\n        return JSON.parse(getVar(this.sign + id, defaultClass))\\n    },\\n    setUrl(url) {\\n        return url.replace(/\\\\$\\\\{([^}]*)\\\\}/g, (_, id) => this.getClass(id).url)\\n    }\\n}\\n// 生成头部分类\\nconst fyAll = RULE.url.includes('fyAll')\\nlet tabHeader = []\\nif (RULE.class_name) tabHeader.push({\\n    id: fyAll ? 'fyAll' : 'fyclass',\\n    class_name: RULE.class_name,\\n    class_url: RULE.class_url\\n})\\nif (RULE.area_name) tabHeader.push({\\n    id: fyAll ? 'fyAll' : 'fyarea',\\n    class_name: RULE.area_name,\\n    class_url: RULE.area_url\\n})\\nif (RULE.year_name) tabHeader.push({\\n    id: fyAll ? 'fyAll' : 'fyyear',\\n    class_name: RULE.year_name,\\n    class_url: RULE.year_url\\n})\\nif (RULE.sort_name) tabHeader.push({\\n    id: fyAll ? 'fyAll' : 'fysort',\\n    class_name: RULE.sort_name,\\n    class_url: RULE.sort_url\\n})\\ntabHeader = new ClassTab(tabHeader, { name: RULE.title, fold: readFile('tabFold'), })\\n\"},{\"col_type\":\"icon_2_round\",\"name\":\"设置\",\"path\":\"Config\",\"rule\":\"js:\\naddListener('onClose', 'clearMyVar(\\\"sortFlag\\\");refreshPage()')\\nsetPageTitle('⚙ 轻合集设置 ⚙')\\nconst QING_TITLE = getMyVar('myCollection')\\nlet data = $.require('hiker://page/dataLoad?rule=' + QING_TITLE)(true),\\n    el = [{\\n        title: '<b> 清除缓存，立即更新 <small> （基于远程仓库，不要频繁点击）',\\n        url: $('基于远程仓库，不要频繁点击，增加仓库压力\\\\n若为本地文件，则不会进行缓存，本功能也无效').confirm(() => {\\n            deleteCache(getMyVar('remoteUrl'))\\n            back(false)\\n            return 'toast://已更新'\\n        }),\\n        img: 'hiker://images/icon4',\\n        col_type: 'avatar'\\n    }],\\n    updateInterval = readFile('updateInterval') || '1',\\n    newWindow = readFile('newWindow'),\\n    tabFold = readFile('tabFold'),\\n    disableCustom = readFile('disableCustom'),\\n    editMode = getMyVar('editMode', '启用/禁用')\\n\\nel.push({\\n    title: '  💡 更新频率: ' + (updateInterval == 0 ? '手动' : updateInterval + '天') + '  ',\\n    url: $(updateInterval, '输入更新间隔（天），为0则手动更新\\\\n本地文件链接无效').input(() => {\\n        saveFile('updateInterval', input)\\n        refreshPage()\\n        return 'hiker://empty'\\n    }),\\n    col_type: 'scroll_button'\\n}, {\\n    title: '  🖥 独立首页: ' + (newWindow ? '是' : '否') + '  ',\\n    url: $('#noLoading#').lazyRule((newWindow) => {\\n        saveFile('newWindow', newWindow ? '' : '1')\\n        refreshPage()\\n        return 'hiker://empty'\\n    }, newWindow),\\n    col_type: 'scroll_button'\\n}, {\\n    title: '  💠 分类折叠: ' + (tabFold ? '是' : '否') + '  ',\\n    url: $('#noLoading#').lazyRule((tabFold) => {\\n        saveFile('tabFold', tabFold ? '' : '1')\\n        refreshPage()\\n        return 'hiker://empty'\\n    }, tabFold),\\n    col_type: 'scroll_button'\\n}, {\\n    title: '  💼 备份恢复  ',\\n    url: $(['备份', '恢复'], 1).select((QING_TITLE, updateInterval, newWindow, tabFold, disableCustom) => {\\n        let url = getMyVar('remoteUrl')\\n        if (!url.startsWith('hiker://') && !url.startsWith('file://'))\\n            url = 'hiker://files/libs/' + md5(url) + '.js'\\n        else if(url.startsWith('hiker://page/')) url = 'hiker://empty'\\n        if (input == '备份') return $('hiker://files/tmp/' + QING_TITLE + '_backup.json', '输入备份路径')\\n            .input((url, updateInterval, newWindow, tabFold, disableCustom) => {\\n                let rules = request(url),\\n                    customData = readFile('customData')\\n                writeFile(input, JSON.stringify({\\n                    updateInterval: updateInterval,\\n                    newWindow: newWindow,\\n                    tabFold: tabFold,\\n                    disableCustom: disableCustom,\\n                    customData: customData,\\n                    rules: rules\\n                }))\\n                return 'toast://已备份，注意若仓库为子页面则不备份'\\n            }, url, updateInterval, newWindow, tabFold, disableCustom)\\n        else return $('hiker://files/tmp/' + QING_TITLE + '_backup.json', '输入备份路径').input((url) => {\\n            let { updateInterval, newWindow, tabFold, disableCustom, customData, rules } = JSON.parse(request(input))\\n            saveFile('updateInterval', updateInterval)\\n            saveFile('newWindow', newWindow)\\n            saveFile('tabFold', tabFold)\\n            saveFile('disableCustom', disableCustom)\\n            saveFile('customData', customData)\\n            if(rules) writeFile(url, rules)\\n            refreshPage()\\n            return 'toast://已恢复，如果不想同步远程仓库，可以设置更新频率为手动'\\n        }, url)\\n    }, QING_TITLE, updateInterval, newWindow, tabFold, disableCustom),\\n    col_type: 'scroll_button'\\n}, {\\n    title: '““””<font color=\\\"#666666\\\"><small>特别鸣谢，小程序提供者：\\\\n' +\\n        data.reduce((self, v) => v.author ? self.concat(v.author.split('&')) : self, [])\\n        .filter((v, i, arr) => v && arr.indexOf(v) == i).join('、'),\\n    url: 'hiker://empty',\\n    col_type: 'text_center_1'\\n})\\n\\nel.push({ col_type: 'line' }, {\\n    title: '““””' + '📝'.small() + '&nbsp 轻合集自定义 &nbsp'.bold().fontcolor('#757575') + (disableCustom ? '❌' : '⭕').small(),\\n    url: $([(disableCustom ? '启用' : '禁用') + '合集自定义', '清除自定义数据'], 1).select(() => {\\n        if (input == '清除自定义数据') {\\n            deleteFile('customData')\\n        } else if (input == '启用合集自定义') {\\n            saveFile('disableCustom', '')\\n        } else {\\n            saveFile('disableCustom', '1')\\n            input += '\\\\n小程序启用/禁用、重新排序等操作均不会体现在首页小程序列表中'\\n        }\\n        refreshPage(false)\\n        return 'toast://已' + input\\n    }),\\n    col_type: 'text_center_1',\\n    extra: { lineVisible: false }\\n});\\n['启用/禁用', '重新排序', '更改图标', '导入海阔'].forEach((v) => {\\n    el.push({\\n        title: v == editMode ? '““””' + v.bold().fontcolor('#12b668') : v,\\n        url: v == editMode ? 'hiker://empty' : $('#noLoading#').lazyRule((v) => {\\n            putMyVar('editMode', v)\\n            refreshPage(false)\\n            return 'hiker://empty'\\n        }, v),\\n        col_type: 'scroll_button'\\n    })\\n})\\nJSON.parse(readFile('customData') || '[]').forEach((v, i) => {\\n    let d = { title: v.title, img: data[i].icon }\\n    switch (editMode) {\\n        case '启用/禁用':\\n            d.title = (v.visible ? '🟢  ' : '🔴  ') + d.title\\n            d.url = $('#noLoading#').lazyRule((i) => {\\n                let rules = JSON.parse(readFile('customData') || '[]')\\n                rules[i].visible = !rules[i].visible\\n                saveFile('customData', JSON.stringify(rules))\\n                refreshPage(false)\\n                return 'hiker://empty'\\n            }, i)\\n            break\\n        case '重新排序':\\n            let sortFlag = parseInt(getMyVar('sortFlag', '-1'))\\n            d.title = (sortFlag == i ? '🔃  ' : '') + d.title\\n            if (sortFlag == -1)\\n                d.url = $('#noLoading#').lazyRule((i) => {\\n                    putMyVar('sortFlag', i.toString())\\n                    refreshPage(false)\\n                    return 'toast://选择要移动到的位置'\\n                }, i)\\n            else\\n                d.url = $('#noLoading#').lazyRule((oldIndex, newIndex) => {\\n                    let rules = JSON.parse(readFile('customData') || '[]')\\n                    rules.splice(newIndex, 0, rules.splice(oldIndex, 1)[0])\\n                    saveFile('customData', JSON.stringify(rules))\\n                    putMyVar('sortFlag', '-1')\\n                    refreshPage(false)\\n                    return 'hiker://empty'\\n                }, sortFlag, i)\\n            break\\n        case '更改图标':\\n            d.url = $(v.icon || '', '输入新图标地址或颜色代码：').input((i) => {\\n                let rules = JSON.parse(readFile('customData') || '[]')\\n                if (input)\\n                    rules[i].icon = input\\n                else\\n                    delete rules[i].icon\\n                saveFile('customData', JSON.stringify(rules))\\n                refreshPage(false)\\n                return 'hiker://empty'\\n            }, i)\\n            break\\n        case '导入海阔':\\n            d.url = 'rule://' + base64Encode(JSON.stringify(data[i]))\\n            break\\n    }\\n    el.push(d)\\n})\\nsetResult(el)\\n\"},{\"col_type\":\"movie_3\",\"name\":\"页面载入\",\"path\":\"frameLoad\",\"rule\":\"js:\\nconst QING_TITLE = getMyVar('myCollection')\\nfunction runCode(rule) {\\n    try {\\n        let [input, code] = rule.split('.js:')\\n        return code ? eval(code) : rule\\n    } catch (e) { return rule }\\n}\\nlet myCollection_el = [],\\n    { RULE, HASH, isIndex, pageTitle } = MY_PARAMS\\n//log(\\\"start:\\\" + QING_TITLE)\\nlet dataRule = $.require('hiker://page/dataLoad?rule=' + QING_TITLE)().find((v) => v.title == RULE.title)\\nlet getRule = $.toString((QING_TITLE, title) => {\\n    //log(\\\"getRule:\\\" + QING_TITLE + \\\"====\\\" + title)\\n    return $.require(\\\"hiker://page/dataLoad?rule=\\\" + QING_TITLE)().find((v) => v.title == title)\\n}, QING_TITLE, RULE.title)\\nRULE = isIndex ? dataRule : Object.assign(dataRule, RULE)\\n//log(dataRule.pageList)\\neval(JSON.parse(fetch('hiker://page/preFunc?rule=' + QING_TITLE)).rule)\\neval(JSON.parse(fetch('hiker://page/urlParse?rule=' + QING_TITLE)).rule)\\n\\nif (isIndex) {\\n    // 计数已打开小程序，防止独立页面时轻合集出发关闭导致页面规则缓存清理\\n    let openedIndex = parseInt(getMyVar('openedIndex', '0'))\\n    putMyVar('openedIndex', String(openedIndex + 1))\\n    addListener = function(param0, param1, param2) {\\n        param2 = CALLBACK_KEY;\\n        if (param0 == 'onClose') param1 += ';' + $.toString(() => {\\n            let openedIndex = parseInt(getMyVar('openedIndex', '0'))\\n            putMyVar('openedIndex', String(openedIndex - 1))\\n        })\\n        method_addListener.invoke(javaContext, param0, param1, param2)\\n    }\\n    addListener('onClose', '')\\n    if (MY_PAGE == 1) {\\n        // 加载ClassTab组件\\n        eval(JSON.parse(fetch('hiker://page/ClassTab?rule=' + QING_TITLE)).rule)\\n        tabHeader.load(myCollection_el)\\n        if (RULE.search_url) myCollection_el.push({\\n            title: \\\"搜索\\\",\\n            desc: \\\"搜你想要的...\\\",\\n            url: '\\\"hiker://search?s=\\\"+input',\\n            extra: {\\n                rules: $.toString((QING_TITLE, title) => {\\n                    let rules = $.require('hiker://page/dataLoad?rule=' + QING_TITLE)()\\n                    rules = [rules.find((v) => v.title == title)]\\n                    return JSON.stringify(rules)\\n                }, QING_TITLE, RULE.title),\\n                defaultValue: getMyVar('searchKey', ''),\\n                onChange: \\\"putMyVar('searchKey',input)\\\"\\n            },\\n            col_type: \\\"input\\\",\\n        })\\n    }\\n    // 处理MY_RULE\\n    MY_RULE.url = RULE.url\\n    MY_RULE.col_type = RULE.col_type\\n    MY_RULE.detail_col_type = RULE.detail_col_type\\n    MY_RULE.find_rule = RULE.find_rule\\n    MY_RULE.detail_find_rule = RULE.detail_find_rule\\n    MY_RULE.pageList = JSON.parse(RULE.pages || '[]')\\n    MY_RULE.pages = JSON.stringify(MY_RULE.pageList)\\n    MY_RULE.params = {}\\n} else {\\n    MY_RULE.url = MY_PARAMS.url\\n    MY_RULE.col_type = RULE.detail_col_type\\n    MY_RULE.find_rule = RULE.detail_find_rule\\n    MY_RULE.pageList = RULE.pageList || JSON.parse(RULE.pages || '[]')\\n    MY_RULE.pages = RULE.pages\\n    MY_RULE.params = RULE.params\\n}\\nMY_RULE.ua = RULE.ua\\nMY_RULE.title = RULE.title\\nMY_RULE.preRule = RULE.preRule\\nMY_RULE.last_chapter_rule = RULE.last_chapter_rule\\n\\nif (!isIndex) {\\n    if (pageTitle) setPageTitle(pageTitle)\\n    setLastChapterRule(MY_RULE.last_chapter_rule)\\n    MY_PARAMS = MY_RULE.params\\n}\\n// 预处理并初始化config\\nif (isIndex && MY_PAGE == 1) eval(MY_RULE.preRule)\\nlet _cfg = getMyVar('initConfig', '{}')\\nif (_cfg && _cfg.length > 0) {\\n    config = JSON.parse(_cfg)\\n}\\n\\nfunction genRule() {\\n    let _a = Object.assign({}, MY_RULE);\\n    delete _a[\\\"pageList\\\"]\\n    delete _a[\\\"pages\\\"]\\n    return _a\\n}\\n\\n// 正文解析\\nif (MY_RULE.find_rule.startsWith('js:')) {\\n    setResult = function(el, param1, param2, param3) {\\n        param1 = CALLBACK_KEY\\n        param2 = MY_RULE\\n        param3 = MY_TYPE\\n        if (Array.isArray(el.data)) el = el.data;\\n        Array.prototype.push.apply(myCollection_el, el.map((v) => {\\n            let MY__RULE = genRule()\\n            MY__RULE.params = v.extra || {}\\n            v.col_type = v.col_type || MY_RULE.col_type\\n\\n            if (!v.url || ['rule', 'pics', 'toast', 'input', 'copy', 'editFile', 'x5', 'x5WebView', 'x5Play', 'web', 'select', 'x5Rule', 'webRule', 'download', 'share'].find((vv) => v.url.startsWith(vv + '://')) || ['x5_webview_single', 'input'].find((vv) => v.col_type == vv)) {\\n                return v\\n            } else if (v.url.includes('@rule=')) {\\n                let [_, url, rule] = v.url.match(/^([\\\\s\\\\S]*?)@rule=([\\\\s\\\\S]*)$/)\\n                v.url = url\\n                MY__RULE.detail_find_rule = rule\\n                MY__RULE.detail_col_type = MY_RULE.col_type\\n            } else if (v.url.startsWith('hiker://page/')) {\\n                if (v.url.includes('rule=') || (v.extra || {}).rule)\\n                    return v\\n                let [_, path, flag, params] = v.url.match(/^hiker:\\\\/\\\\/page\\\\/(.+?)(#.*?)?(?:\\\\?(.*))?$/),\\n                    subPage = MY_RULE.pageList.find((v) => v.path == path),\\n                    subUrl = (params || '').split('&').find((v) => v.startsWith('url='))\\n                v.url = subUrl ? subUrl.slice(4).replace(/？？/g, '?').replace(/＆＆/g, '&') : (v.extra || {}).url || 'hiker://empty' + flag + '?' + (params || '')\\n                MY__RULE.detail_find_rule = subPage.rule\\n                MY__RULE.detail_col_type = subPage.col_type\\n                MY__RULE.params = v.extra || {}\\n            } else if (v.url.includes('@lazyRule=')) {\\n                let reIndex = v.url.indexOf('.js:')\\n                if (reIndex >= 0) v.url = v.url.slice(0, reIndex) + '.js:\\\\nif(MY_RULE)Object.assign(MY_RULE, ' + getRule + ');' + v.url.slice(reIndex + 4)\\n                return v\\n            } else if (isIndex) {\\n                if (!MY_RULE.detail_find_rule || /hiker:\\\\/\\\\/(?!empty.+$)/.test(v.url)) return v\\n            } else {\\n                return v\\n            }\\n            v.extra = {\\n                url: (function(url) {\\n                    url = url.split(';')\\n                    return url.shift() + ';' + paramHandle(url, MY_RULE.ua, MY_RULE.url)\\n                })(v.url),\\n                RULE: MY__RULE,\\n                pageTitle: isIndex && v.title\\n            }\\n            v.url = 'hiker://page/frameLoad?rule=' + QING_TITLE\\n            return v\\n        }))\\n        method_setResult.invoke(javaContext, myCollection_el, param1, param2, param3)\\n    }\\n    setHomeResult = setResult\\n    setSearchResult = setResult\\n\\n    eval(MY_RULE.find_rule.slice(3))\\n} else {\\n    let [_, findRule, detailFindRule] = MY_RULE.find_rule.match(/^([\\\\s\\\\S]*?)(?:==>([\\\\s\\\\S]*))?$/)\\n    findRule = findRule.split(';')\\n    parseDomForArray(getResCode(), findRule.shift()).forEach((data) => {\\n        let [title, img, desc, url] = findRule.map((v, i) => {\\n                try {\\n                    if (v == '*') return ''\\n                    else v = (i == 1 || i == 3) ?\\n                        parseDom(data, v) :\\n                        parseDomForHtml(data, v)\\n                    if (i != 3) v = runCode(v)\\n                    return v\\n                } catch (e) { return '' }\\n            }),\\n            res = {\\n                title: title, url: url,\\n                desc: desc, img: img,\\n                col_type: MY_RULE.col_type\\n            }\\n        if (res.url) {\\n            if (res.url.includes('@lazyRule=')) {\\n                let reIndex = res.url.indexOf('.js:')\\n                if (reIndex >= 0) res.url = res.url.slice(0, reIndex) + '.js:\\\\nif(MY_RULE)Object.assign(MY_RULE, ' + getRule +  ');' + res.url.slice(reIndex + 4)\\n            } else if (detailFindRule) {\\n                let _a = genRule()\\n                _a.detail_find_rule = detailFindRule\\n                res.extra = {\\n                    url: (function(url) {\\n                        url = url.split(';')\\n                        return url.shift() + ';' + paramHandle(url, MY_RULE.ua, MY_RULE.url.split(';')[2])\\n                    })(url),\\n                    RULE: _a,\\n                    pageTitle: isIndex && title\\n                }\\n                res.url = 'hiker://page/frameLoad?rule=' + QING_TITLE\\n            } else if (MY_RULE.detail_find_rule) {\\n                res.extra = {\\n                    url: (function(url) {\\n                        url = url.split(';')\\n                        return url.shift() + ';' + paramHandle(url, MY_RULE.ua, MY_RULE.url)\\n                    })(url),\\n                    RULE: genRule(),\\n                    pageTitle: isIndex && title\\n                }\\n                res.url = 'hiker://page/frameLoad?rule=' + QING_TITLE\\n            }\\n        }\\n        myCollection_el.push(res)\\n    })\\n    setResult(myCollection_el)\\n}\"},{\"col_type\":\"movie_3\",\"name\":\"数据载入\",\"path\":\"dataLoad\",\"rule\":\"$.exports = function(showAll) {\\n    let url = getMyVar('remoteUrl'),\\n        data = []\\n    if (url.startsWith('hiker://') || url.startsWith('file://')) {\\n        // 如果为本地文件则不进行缓存\\n        try {\\n            let oriData = fetch(url)\\n            if (url.startsWith('hiker://page/'))\\n                oriData = JSON.parse(oriData).rule\\n            data = JSON.parse(oriData)\\n        } catch (e) {}\\n    } else {\\n        // 获取远程数据，检查间隔默认一天\\n        let interval = parseInt(readFile('updateInterval') || '1'),\\n            oldData = fetch('hiker://files/libs/' + md5(url) + '.js'),\\n            remoteData = fetchCache(url, 24 * interval)\\n        try { remoteData = JSON.parse(remoteData) } catch(e) {}\\n        if(!Array.isArray(remoteData)) remoteData = []\\n        if (remoteData.length < 3) {\\n            log('未获取到数据')\\n            if (oldData) writeFile('hiker://files/libs/' + md5(url) + '.js', oldData)\\n            data = JSON.parse(oldData || '[]')\\n        } else {\\n            log('已获取到数据')\\n            data = remoteData\\n        }\\n    }\\n    data = data.filter((v) => { return v.title != getMyVar('myCollection') && !(v.author || '').includes('轻合集生成器') })\\n    if (readFile('disableCustom')) return data\\n    else { // 写入自定义数据\\n        let customData = JSON.parse(readFile('customData') || '[]'),\\n            rewriteData = []\\n        customData = customData.reduce((self, v) => {\\n            let index = data.findIndex((vv) => v.title == vv.title)\\n            if (index >= 0) {\\n                self.push(v)\\n                let rule = data.splice(index, 1)[0]\\n                if (showAll || v.visible)\\n                    rewriteData.push(Object.assign(rule, v))\\n            }\\n            return self\\n        }, [])\\n        data.forEach((v) => customData.push({ title: v.title, visible: true }))\\n        saveFile('customData', JSON.stringify(customData))\\n        return rewriteData.concat(data)\\n    }\\n}\\n\"},{\"col_type\":\"movie_3\",\"name\":\"函数重写\",\"path\":\"preFunc\",\"rule\":\"// 防止require多次运行\\nlet rCache = {}\\nrequire = function(param0, param1, param2, param3, param4) {\\n    if (!param0 || rCache[param0] != null) {\\n        return\\n    }\\n    rCache[param0] = 1\\n    param2 = param2 || 0\\n    param3 = MY_TICKET\\n    param4 = eval\\n    return method_require.invoke(javaContext, param0, param1, param2, param3, param4)\\n}\\nrequireCache = function(param0, param1, param2, param3, param4, param5) {\\n    if (!param0 || rCache[param0] != null) {\\n        return\\n    }\\n    rCache[param0] = 1\\n    param3 = param3 || 0\\n    param4 = MY_TICKET\\n    param5 = eval\\n    return method_requireCache.invoke(javaContext, param0, param1, param2, param3, param4, param5)\\n}\\nrc = requireCache\\n\\n// 最新章节规则注入预处理代码\\nsetLastChapterRule = function(param0) {\\n    if (!param0) return\\n    if (param0.startsWith(\\\"js:\\\") && MY_RULE.preRule) {\\n        param0 = 'js:\\\\ntry{eval(JSON.parse(fetch(\\\"hiker://page/preFunc?rule=' + QING_TITLE + '\\\")).rule);\\\\\\n            eval(base64Decode(\\\"' + base64Encode(MY_RULE.preRule) + '\\\"));\\\\\\n            let _cfg = getMyVar(\\\"initConfig\\\", \\\"{}\\\");\\\\\\n            if (_cfg && _cfg.length>0) {config = JSON.parse(_cfg)}}catch(e){log(e.message)}\\\\n;' +\\n            param0.slice(3)\\n    }\\n    method_setLastChapterRule.invoke(javaContext, param0);\\n}\\n\"},{\"col_type\":\"movie_3\",\"name\":\"链接处理\",\"path\":\"urlParse\",\"rule\":\"// 首页链接替换分类\\nfunction indexUrl(param) {\\n    function runCode(rule) {\\n        try {\\n            let [input, code] = rule.split('.js:')\\n            return code ? eval(code) : rule\\n        } catch (e) { return rule }\\n    }\\n    let { RULE, pageNum, QING_TITLE } = JSON.parse(param.split('###')[1])\\n    RULE = JSON.parse(base64Decode(RULE))\\n    pageNum = parseInt(pageNum)\\n    let url = RULE.url,\\n        tabHeader = []\\n\\n    eval(JSON.parse(fetch('hiker://page/ClassTab?rule=' + QING_TITLE)).rule)\\n    url = tabHeader.setUrl(fyAll ? url.replace(/fyAll/g, '$${fyAll}') : url.replace(/fy(class|area|year|sort)/g, '$${fy$1}'))\\n    url = url.replace(/fypage(?:@(-?\\\\d+)@)?(?:\\\\*(\\\\d+)@)?/g, (_, start, space) => parseInt(start || 0) + 1 + (pageNum - 1) * parseInt(space || 1))\\n    url = /^([\\\\s\\\\S]*?)(?:\\\\[firstPage=([\\\\s\\\\S]*?)\\\\])?(?:(\\\\.js:[\\\\s\\\\S]*?))?$/.exec(url)\\n    if (pageNum == 1 && url[2]) url[1] = url[2]\\n    if (url[3] && !url[1].includes('.js:')) url[1] += url[3]\\n    return runCode(url[1])\\n}\\n// 链接参数处理\\nfunction paramHandle(urlParam, ua, urlTmp) {\\n    let charset, UserAgent\\n    try { // 链接的编码和ua应该是首先继承首页链接\\n        [, , charset, UserAgent] = urlTmp.split(';')\\n        UserAgent = UserAgent.match(/^{(.*)}$/)[1].split('&&').find((v) => v.startsWith('User-Agent@'))\\n    } catch (e) {}\\n    urlParam[0] = urlParam[0] || 'GET'\\n    urlParam[1] = urlParam[1] || charset || 'UTF-8'\\n    try {\\n        urlParam[2] = urlParam[2].match(/^{(.*)}$/)[1].split('&&')\\n    } catch (e) { urlParam[2] = [] }\\n    // 添加全局UA\\n    if (!urlParam[2].some((v) => v.startsWith('User-Agent@'))) {\\n        if (UserAgent) urlParam[2].push(UserAgent)\\n        else if (ua == 'pc')\\n            urlParam[2].push('User-Agent@' + PC_UA.replace(/;/g, '；；').replace(/\\\\?/, '？？'))\\n        else if (ua == 'mobile')\\n            urlParam[2].push('User-Agent@' + MOBILE_UA.replace(/;/g, '；；').replace(/\\\\?/, '？？'))\\n    }\\n    urlParam[2] = '{' + urlParam[2].join('&&') + '}'\\n    return urlParam.join(';')\\n}\\n\"},{\"col_type\":\"movie_3\",\"name\":\"规则列表\",\"path\":\"data\",\"rule\":\"[{\\n    \\\"last_chapter_rule\\\": \\\"js:\\\\nvar html = getResCode();\\\\nvar list = JSON.parse(html).data.page.list\\\\nvar i = list.length\\\\nif (i>1){\\\\nvar title = list[i,i-1].name\\\\nsetResult(\\\\\\\"更新至: \\\\\\\" + title)}\\\",\\n    \\\"title\\\": \\\"云图有声\\\",\\n    \\\"author\\\": \\\"Zfhiker\\\",\\n    \\\"version\\\": 0,\\n    \\\"type\\\": \\\"music\\\",\\n    \\\"url\\\": \\\"https://api-micro.yuntuys.com/ytys/book/page/fypage/20?clazz=fyAll&dept=101&version=108\\\",\\n    \\\"col_type\\\": \\\"movie_3\\\",\\n    \\\"class_name\\\": \\\"豆瓣高分&广播剧&影视同期&先锋党建&鉴赏导读&人气畅销&诺奖作家作品&自我进化&品质生活&前沿科学&情感心理&职场升级&商业财经&亲子家庭&世界名著&中国文学&外国文学&国学经典&诗词散文&人物传记&古典文学&\\\",\\n    \\\"class_url\\\": \\\"125&126&127&585&973&1666&2220&904&905&906&907&908&909&910&131&132&133&134&135&136&2223&\\\",\\n    \\\"area_name\\\": \\\"国风古韵&青春校园&科学幻想&官场商战&军事谍战&悬疑推理&现代都市&怪奇物语&侠义江湖&创业学院&职场指南&商界大咖&金融理财&管理进阶&儿童文学&童话名著&国学启蒙&儿歌故事&百科知识&亲子教育&\\\",\\n    \\\"area_url\\\": \\\"137&138&139&140&141&142&143&144&335&148&149&150&151&2018&152&153&154&155&156&157&\\\",\\n    \\\"sort_name\\\": \\\"战争烽火&革命先驱&国家领袖&养生保健&养颜减肥&食疗课堂&孕产育儿&心理健康&婚恋家庭&心灵励志&生活百科&娱乐休闲&新评书\\\",\\n    \\\"year_name\\\": \\\"听见真知&世界文学&大美中医&英语进阶&民俗文化&世界之窗&哲学思想&艺术之旅&廿四节气&传统节日&古代历史&近现代史&世界历史&传奇史话&法律普及&走近冬奥&亚运风采&军事纪实&\\\",\\n    \\\"sort_url\\\": \\\"174&176&177&181&182&183&184&185&186&187&188&189&2089\\\",\\n    \\\"year_url\\\": \\\"124&2014&2021&2086&161&163&164&798&920&2017&165&166&167&168&965&1462&2034&173&\\\",\\n    \\\"find_rule\\\": \\\"js:\\\\nvar d = [];\\\\nhtml = getResCode();\\\\nvar list = JSON.parse(html).data.list\\\\ntry {\\\\n    list.forEach(data => {\\\\n        d.push({\\\\n            title: data.name,\\\\n            desc: '▶️' + data.plays,\\\\n            img: data.cover + '@Referer=',\\\\n            url: 'https://api-micro.yuntuys.com/ytys/chapter/page/1/200?history=true&sortBy=ASC&version=' + getParam('version') + '&dept=' + getParam('dept') + '&book=' + data.id + \\\\\\\"#immersiveTheme##autoCache#\\\\\\\",\\\\n            col_type: '',\\\\n        })\\\\n    })\\\\n} catch (e) {}\\\\nsetResult(d)\\\",\\n    \\\"searchFind\\\": \\\"js:\\\\nvar d = [];\\\\nhtml = getResCode();\\\\nvar list = JSON.parse(html).data.list\\\\ntry {\\\\n    list.forEach(data => {\\\\n        d.push({\\\\n            title: data.name,\\\\n            desc: '播音：' + data.anchor,\\\\n            img: data.cover + '@Referer=',\\\\n            url: 'https://api-micro.yuntuys.com/ytys/chapter/page/fypage/200?history=true&sortBy=ASC&version=' + getParam('version') + '&dept=' + getParam('dept') + '&book=' + data.id + \\\\\\\"#immersiveTheme##autoCache#\\\\\\\",\\\\n            col_type: '',\\\\n        })\\\\n    })\\\\n} catch (e) {}\\\\nsetResult(d)\\\",\\n    \\\"search_url\\\": \\\"https://api-micro.yuntuys.com/ytys/book/search/fypage/20?search=**&version=108&dept=101\\\",\\n    \\\"group\\\": \\\"#听书\\\",\\n    \\\"detail_col_type\\\": \\\"movie_1\\\",\\n    \\\"detail_find_rule\\\": \\\"js:\\\\nvar d = [];\\\\nhtml = getResCode();\\\\nvar id = MY_URL.match(/book=(\\\\\\\\d+)#/)[1]\\\\nvar htmls = JSON.parse(request('https://api-micro.yuntuys.com/ytys/book/detail/101/108/' + id)).data\\\\nif (MY_PAGE == 1) {\\\\n    d.push({\\\\n        title: '作者：' + htmls.author,\\\\n        desc: '播音：' + htmls.anchor,\\\\n        img: htmls.cover + '@Referer=',\\\\n        url: htmls.cover,\\\\n        col_type: 'movie_1_vertical_pic_blur',\\\\n        extra: {\\\\n            gradient: true\\\\n        }\\\\n    })\\\\n    var 简介 = htmls.summary\\\\n    d.push({\\\\n        title: '‘‘’’<small><font color=\\\\\\\"#ff148e8e\\\\\\\">简介：' + 简介.substr(0, 55) + '...</font><small><font color=\\\\\\\"red\\\\\\\">详情</font></small></small>',\\\\n        url: 'hiker://empty#' + '\\\\\\\\n' + 简介 + '#noHistory#' + `@rule=js: var d = [];d.push({title:'简介：'+ MY_URL.split('#')[1],col_type: 'long_text'}); setResult(d);`,\\\\n        col_type: 'text_1'\\\\n    });\\\\n    d.push({\\\\n        title: (getVar('shsort') == '1') ? '““””<b><span style=\\\\\\\"color: #FF0000\\\\\\\">逆序</span></b>' : '““””<b><span style=\\\\\\\"color: #1aad19\\\\\\\">正序</span></b>',\\\\n        url: `@lazyRule=.js:let conf = getVar('shsort');if(conf=='1'){putVar({key:'shsort', value:'0'});}else{putVar({key:'shsort', value:'1'})};refreshPage();'toast://切换排序成功'`,\\\\n        col_type: 'flex_button'\\\\n    })\\\\n    d.push({\\\\n        title: \\\\\\\"样式🎨\\\\\\\",\\\\n        url: $([\\\\\\\"text_1\\\\\\\", \\\\\\\"text_2\\\\\\\", \\\\\\\"text_3\\\\\\\", \\\\\\\"text_4\\\\\\\", \\\\\\\"text_5\\\\\\\", \\\\\\\"text_center_1\\\\\\\", \\\\\\\"avatar\\\\\\\", \\\\\\\"text_icon\\\\\\\"], 2).select(() => {\\\\n            setItem(\\\\\\\"col_type\\\\\\\", input)\\\\n            refreshPage()\\\\n            return \\\\\\\"toast://已切换\\\\\\\"\\\\n        }),\\\\n        col_type: \\\\\\\"flex_button\\\\\\\"\\\\n    })\\\\n}\\\\nvar name = MY_RULE.url.split(\\\\\\\"#\\\\\\\")[0];\\\\n//clearItem(name)\\\\nvar urls = getItem(name, MY_URL);\\\\nvar type = getItem(\\\\\\\"col_type\\\\\\\", \\\\\\\"text_4\\\\\\\")\\\\nvar lists = JSON.parse(fetch(urls)).data.page\\\\nvar list = lists.list\\\\nvar listt = JSON.parse(html).data.page.list\\\\nvar ym = lists.pages\\\\nfor (var i = 1; i < ym + 1; i++) {\\\\n    var url = MY_URL.replace('page/1', 'page/' + i);\\\\n    if (i > 1) {\\\\n        var aa = (i - 1) * 2 + '01'\\\\n        var bb = i * 2 + '00'\\\\n    } else {\\\\n        var aa = '1'\\\\n        var bb = listt[listt.length - 1].rank\\\\n    }\\\\n    d.push({\\\\n        title: url == getItem(name, MY_URL) ? '““' +\\\\n            aa + '-' + bb + '””' : aa + '-' + bb,\\\\n        url: url + $('#noLoading#').lazyRule((name) => {\\\\n            setItem(name, input);\\\\n            refreshPage(false)\\\\n            return 'toast://切换成功!'\\\\n        }, name),\\\\n        col_type: \\\\\\\"scroll_button\\\\\\\"\\\\n    });\\\\n}\\\\nif (getVar('shsort') == '1') {\\\\n    var list = list.reverse();\\\\n}\\\\ntry {\\\\n    list.forEach(data => {\\\\n        d.push({\\\\n            title: data.name,\\\\n            url: 'https://api-micro.yuntuys.com/ytys/chapter/get/' + data.id + '?version=108&dept=101' + $(\\\\\\\"\\\\\\\").lazyRule(() => {\\\\n                var url = JSON.parse(request(input, {})).data.audio\\\\n                return url + '#isMusic=true#'\\\\n            }),\\\\n            col_type: type,\\\\n        })\\\\n    })\\\\n} catch (e) {}\\\\nsetResult(d)\\\",\\n    \\\"sdetail_col_type\\\": \\\"movie_1\\\",\\n    \\\"sdetail_find_rule\\\": \\\"*\\\",\\n    \\\"ua\\\": \\\"mobile\\\",\\n    \\\"preRule\\\": \\\"\\\",\\n    \\\"pages\\\": \\\"[]\\\",\\n    \\\"proxy\\\": \\\"\\\",\\n    \\\"icon\\\": \\\"https://yuntuwechat.yuntuys.com/favicon.ico\\\"\\n},  {\\n    \\\"last_chapter_rule\\\": \\\"js:\\\\nvar html = fetch(MY_URL.replace(/page=\\\\\\\\d*/,\\\\\\\"page=1\\\\\\\"));\\\\nvar json = JSON.parse(html);\\\\nvar list = json.data.trackDetailInfos;\\\\nvar title = list[0].trackInfo.title.replace(/【.*?】|《.*?》|（[^上|中|下].*?）|\\\\\\\\([^上|中|下].*?\\\\\\\\)/g,\\\\\\\"\\\\\\\");\\\\nsetResult('最新：'+title);\\\",\\n    \\\"title\\\": \\\"喜马拉雅\\\",\\n    \\\"author\\\": \\\"ZF\\\",\\n    \\\"version\\\": 1,\\n    \\\"type\\\": \\\"music\\\",\\n    \\\"url\\\": \\\"https://%6d%2e%78%69%6d%61%6c%61%79%61%2e%63%6f%6d/m-revision/page/rank/queryRank?clusterCode=rise&categoryCode=fyAll\\\",\\n    \\\"col_type\\\": \\\"movie_3_marquee\\\",\\n    \\\"class_name\\\": \\\"全部&有声书&音乐&相声评书&广播剧&娱乐&影视&儿童\\\",\\n    \\\"class_url\\\": \\\"all&youshengshu&yinyue&xiangsheng&guangbojv&yule&yingshi&ertong\\\",\\n    \\\"area_name\\\": \\\"历史&商业财经&人文&教育培训&IT科技&外语&头条&二次元&戏曲&旅游&健康养生&时尚生活\\\",\\n    \\\"area_url\\\": \\\"lishi&shangye&renwen&jiaoyu&keji&waiyu&toutiao&erciyuan&xiqu&lvyou&jiankang&shishang\\\",\\n    \\\"sort_name\\\": \\\"\\\",\\n    \\\"year_name\\\": \\\"\\\",\\n    \\\"sort_url\\\": \\\"\\\",\\n    \\\"year_url\\\": \\\"\\\",\\n    \\\"find_rule\\\": \\\"js:\\\\nvar res={};\\\\nvar d=[];\\\\nvar json = JSON.parse(getResCode());\\\\nvar list = json.data.rankModuleInfoList;\\\\n\\\\nfor (var i in list) {\\\\n    var listi = list[i].albumInfo;\\\\n    var num = list[i].statCountInfo.trackCount;\\\\n    var page_num = Math.ceil(num/20);\\\\n\\\\n    if(listi.albumPayType===0)\\\\n    d.push({\\\\n        title: listi.title,\\\\n        desc: listi.salePoint,\\\\n        pic_url: \\\\\\\"https://imagev2.xmcdn.com/\\\\\\\" + listi.cover,\\\\n        //url: \\\\\\\"https://m.ximalaya.com/m-revision/common/album/queryAlbumTrackRecordsByPage?albumId=\\\\\\\" + list[i].id + \\\\\\\"&page=\\\\\\\" + page_num + \\\\\\\"&pageSize=10&asc=true&countKeys=\\\\\\\"\\\\n        url: \\\\\\\"http://mobile.ximalaya.com/mobile/others/ca/album/track/\\\\\\\" + list[i].id + \\\\\\\"/true/\\\\\\\" + page_num +\\\\\\\"/20?albumId=\\\\\\\" + list[i].id + \\\\\\\"&pageSize=20&isAsc=true&position=1&title=%25E5%25B0%258F%25E7%25BC%2596%25E6%258E%25A8%25E8%258D%2590&device=android\\\\\\\"\\\\n    }); \\\\n}\\\\n\\\\nres.data=d;\\\\nsetHomeResult(res);\\\",\\n    \\\"searchFind\\\": \\\"js:\\\\nvar res={};\\\\nvar d=[];\\\\nvar json = JSON.parse(getResCode());\\\\nvar list = json.response.docs;\\\\n\\\\nfor (var i in list) {\\\\n    var listi = list[i];\\\\n    var num = listi.tracks;\\\\n    var page_num = Math.ceil(num/20);\\\\n\\\\n    if(listi.is_paid==false)\\\\n    d.push({\\\\n        title: listi.title,\\\\n        desc: listi.nickname,\\\\n        content: \\\\\\\"简介：\\\\\\\" + listi.intro.replace(/\\\\\\\\s/g,\\\\\\\"\\\\\\\"),\\\\n        pic_url: listi.cover_path,\\\\n        url: \\\\\\\"http://mobile.ximalaya.com/mobile/others/ca/album/track/\\\\\\\" + list[i].id + \\\\\\\"/true/\\\\\\\" + page_num +\\\\\\\"/20?albumId=\\\\\\\" + list[i].id + \\\\\\\"&pageSize=20&isAsc=true&position=1&title=%25E5%25B0%258F%25E7%25BC%2596%25E6%258E%25A8%25E8%258D%2590&device=android\\\\\\\"\\\\n    }); \\\\n}\\\\n\\\\nres.data=d;\\\\nsetHomeResult(res);\\\",\\n    \\\"search_url\\\": \\\"http://search.%78%69%6d%61%6c%61%79%61%2e%63%6f%6d/front/v1?device=android&condition=relation&core=album&kw=**&page=fypage&rows=20&spellchecker=true\\\",\\n    \\\"group\\\": \\\"#听书\\\",\\n    \\\"detail_col_type\\\": \\\"text_1\\\",\\n    \\\"detail_find_rule\\\": \\\"js:\\\\nvar res={};\\\\nvar d=[];\\\\n\\\\nvar 顺序 = fetch(\\\\\\\"hiker://files/rules/Hood/cache/xmly.txt\\\\\\\",{});\\\\nMY_URL = MY_URL.replace(\\\\\\\"true\\\\\\\", 顺序);\\\\n\\\\nd.push({\\\\n    title: \\\\\\\"““切换列表顺序””\\\\\\\",\\\\n    url: $('#noLoading#').lazyRule(() => {\\\\n        var txt = \\\\\\\"hiker://files/rules/Hood/cache/xmly.txt\\\\\\\";\\\\n        if(fetch(txt).includes(\\\\\\\"true\\\\\\\")){\\\\n            writeFile(txt, \\\\\\\"false\\\\\\\");\\\\n        }else{\\\\n            writeFile(txt, \\\\\\\"true\\\\\\\");\\\\n        }\\\\n        refreshPage(false);\\\\n        return 'toast://请稍候…'\\\\n    }),\\\\n    col_type: 'text_center_1'\\\\n});\\\\n\\\\nvar num = MY_URL.match(/(\\\\\\\\d*)\\\\\\\\/20/)[1];\\\\nvar htmls = [];\\\\nfor (var s = 1; s <= num; s++) {htmls.push({url: MY_URL.replace(/\\\\\\\\d*\\\\\\\\/20/, s + \\\\\\\"/20\\\\\\\")});}\\\\nhtmls = batchFetch(htmls);\\\\n\\\\nfor(var k = 0; k < num; k ++) {\\\\n    var json = JSON.parse(htmls[k]);\\\\n    var list = json.tracks.list;\\\\n\\\\n    for (var i in list) {\\\\n        var listi = list[i];\\\\n        var title = listi.title.replace(/【.*?】|《.*?》|（[^上|中|下].*?）|\\\\\\\\([^上|中|下].*?\\\\\\\\)/g,\\\\\\\"\\\\\\\");\\\\n        var desc = \\\\\\\"\\\\\\\";\\\\n\\\\n        if (title.length > 20) {\\\\n            desc = \\\\\\\"↪\\\\\\\" + title.substring(20);\\\\n            title = title.substring(0,20);\\\\n        }\\\\n\\\\n        d.push({\\\\n            title: title,\\\\n            desc: desc + \\\\\\\"♥\\\\\\\" + listi.likes,\\\\n            url: listi.playUrl64\\\\n        }); \\\\n    }\\\\n}\\\\n\\\\nfor(var b=0;b<3;b++){d.push({col_type: 'big_blank_block'});}\\\\n\\\\nres.data=d;\\\\nsetHomeResult(res);\\\",\\n    \\\"sdetail_col_type\\\": \\\"movie_1\\\",\\n    \\\"sdetail_find_rule\\\": \\\"*\\\",\\n    \\\"ua\\\": \\\"mobile\\\",\\n    \\\"preRule\\\": \\\"var txt = \\\\\\\"hiker://files/rules/Hood/cache/xmly.txt\\\\\\\";\\\\nif(!fetch(txt)) writeFile(txt, \\\\\\\"true\\\\\\\")\\\",\\n    \\\"pages\\\": \\\"[]\\\",\\n    \\\"proxy\\\": \\\"\\\",\\n    \\\"icon\\\": \\\"\\\"\\n}, {\\n    \\\"last_chapter_rule\\\": \\\"\\\",\\n    \\\"title\\\": \\\"声阅APP\\\",\\n    \\\"author\\\": \\\"ZF\\\",\\n    \\\"version\\\": 1,\\n    \\\"type\\\": \\\"music\\\",\\n    \\\"url\\\": \\\"hiker://empty##\\\",\\n    \\\"col_type\\\": \\\"movie_3\\\",\\n    \\\"class_name\\\": \\\"\\\",\\n    \\\"class_url\\\": \\\"\\\",\\n    \\\"area_name\\\": \\\"\\\",\\n    \\\"area_url\\\": \\\"\\\",\\n    \\\"sort_name\\\": \\\"\\\",\\n    \\\"year_name\\\": \\\"\\\",\\n    \\\"sort_url\\\": \\\"\\\",\\n    \\\"year_url\\\": \\\"\\\",\\n    \\\"find_rule\\\": \\\"js:\\\\nlet d = [];\\\\n$.require(\\\\\\\"hanshu\\\\\\\").tuijian1(d);\\\\nsetResult(d);\\\",\\n    \\\"searchFind\\\": \\\"js:\\\\nlet d = [];\\\\nlet keyword = MY_URL.split(\\\\\\\"#\\\\\\\")[1];\\\\nd.push({\\\\n    title: \\\\\\\"搜索 => \\\\\\\"+keyword,\\\\n    desc: \\\\\\\"高级搜索\\\\\\\",\\\\n    url: $(\\\\\\\"hiker://empty#page=fypage\\\\\\\").rule((keyword) => {\\\\n        let d = [];\\\\n        $.require(\\\\\\\"hanshu\\\\\\\").search1(d, keyword); \\\\n        setResult(d)\\\\n    }, keyword),\\\\n    extra: {\\\\n        pageTitle: \\\\\\\"高级搜索\\\\\\\"\\\\n    }\\\\n});\\\\nsetResult(d);\\\",\\n    \\\"search_url\\\": \\\"hiker://empty#**\\\",\\n    \\\"group\\\": \\\"#听书\\\",\\n    \\\"detail_col_type\\\": \\\"movie_1\\\",\\n    \\\"detail_find_rule\\\": \\\"\\\",\\n    \\\"sdetail_col_type\\\": \\\"movie_1\\\",\\n    \\\"sdetail_find_rule\\\": \\\"\\\",\\n    \\\"ua\\\": \\\"mobile\\\",\\n    \\\"preRule\\\": \\\"\\\",\\n    \\\"pages\\\": \\\"[{\\\\\\\"col_type\\\\\\\":\\\\\\\"movie_3\\\\\\\",\\\\\\\"name\\\\\\\":\\\\\\\"函数\\\\\\\",\\\\\\\"path\\\\\\\":\\\\\\\"hanshu\\\\\\\",\\\\\\\"rule\\\\\\\":\\\\\\\"\\\\\\\\nconst apiview = {\\\\\\\\n    toast2: () => {\\\\\\\\n        toast(\\\\\\\\\\\\\\\"该小程序免费\\\\\\\\\\\\\\\");\\\\\\\\n    },\\\\\\\\n    color: (text1, text2) => {       \\\\\\\\n        return '<font color=\\\\\\\\\\\\\\\"'+text1+'\\\\\\\\\\\\\\\">'+text2+'</font>';\\\\\\\\n    },\\\\\\\\n    strong: (test) => {\\\\\\\\n        return '<strong>' + test + '</strong>';\\\\\\\\n    },\\\\\\\\n    small: (test) => {\\\\\\\\n        return '<small>' + test + '</small>';\\\\\\\\n    },\\\\\\\\n    center: (test) => {\\\\\\\\n        return '<p style=\\\\\\\\\\\\\\\"text-align: center;\\\\\\\\\\\\\\\">' + test + '</p>';\\\\\\\\n    },\\\\\\\\n    big: (test) => {\\\\\\\\n        return '<big>' + test + '</big>';\\\\\\\\n    },\\\\\\\\n    gray: (test) => {\\\\\\\\n        return \\\\\\\\\\\\\\\"<font color='gray'>\\\\\\\\\\\\\\\" + test + \\\\\\\\\\\\\\\"</font>\\\\\\\\\\\\\\\";\\\\\\\\n    },\\\\\\\\n    rich1: (test) => {\\\\\\\\n        return \\\\\\\\\\\\\\\"‘‘’’\\\\\\\\\\\\\\\" + test;\\\\\\\\n    },\\\\\\\\n    rich2: (test) => {\\\\\\\\n        return '““””' + test;\\\\\\\\n    },\\\\\\\\n    addressTag: (url, text) => {\\\\\\\\n        return \\\\\\\\\\\\\\\"<a href='\\\\\\\\\\\\\\\" + url + \\\\\\\\\\\\\\\"'>\\\\\\\\\\\\\\\" + text + \\\\\\\\\\\\\\\"</a>\\\\\\\\\\\\\\\";\\\\\\\\n    },\\\\\\\\n    biaoti1: (text) => {\\\\\\\\n        return '““””<font color=\\\\\\\\\\\\\\\"#FD113A\\\\\\\\\\\\\\\">▐ </font><b>'+text+'<b>';\\\\\\\\n    },\\\\\\\\n    top1: (d) => {\\\\\\\\n        d.push({\\\\\\\\n            img: \\\\\\\\\\\\\\\"http://123.56.105.145/img/top.png\\\\\\\\\\\\\\\",\\\\\\\\n            col_type: \\\\\\\\\\\\\\\"pic_1_full\\\\\\\\\\\\\\\",\\\\\\\\n            extra: {\\\\\\\\n                inheritTitle: false\\\\\\\\n            }\\\\\\\\n        });\\\\\\\\n        d.push({\\\\\\\\n            col_type: \\\\\\\\\\\\\\\"big_blank_block\\\\\\\\\\\\\\\"\\\\\\\\n        });\\\\\\\\n    },\\\\\\\\n    toast1: () => {\\\\\\\\n        let time = new Date().getDate().toString();\\\\\\\\n        //log(getItem(\\\\\\\\\\\\\\\"time\\\\\\\\\\\\\\\"))\\\\\\\\n        if (getItem(\\\\\\\\\\\\\\\"time\\\\\\\\\\\\\\\") !== time) {\\\\\\\\n            toast(\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\u8be5\\\\\\\\\\\\\\\\u5c0f\\\\\\\\\\\\\\\\u7a0b\\\\\\\\\\\\\\\\u5e8f\\\\\\\\\\\\\\\\u514d\\\\\\\\\\\\\\\\u8d39\\\\\\\\\\\\\\\");\\\\\\\\n            setItem(\\\\\\\\\\\\\\\"time\\\\\\\\\\\\\\\",time);\\\\\\\\n        }\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction get1(url1) {\\\\\\\\n    return JSON.parse(fetch(url1));\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction liebiao1(d, list1) {\\\\\\\\n    list1.forEach(it => {\\\\\\\\n        d.push({\\\\\\\\n            title: it.moduleTitle,\\\\\\\\n            img: it.moduleImg,\\\\\\\\n            url: $(\\\\\\\\\\\\\\\"hiker://empty#page=fypage#immersiveTheme#\\\\\\\\\\\\\\\").rule((moduleUrl) => {\\\\\\\\n                let d = [];\\\\\\\\n                $.require(\\\\\\\\\\\\\\\"hanshu\\\\\\\\\\\\\\\").rule2(d, moduleUrl);\\\\\\\\n                setResult(d);\\\\\\\\n            }, it.moduleUrl),\\\\\\\\n            col_type: \\\\\\\\\\\\\\\"card_pic_3\\\\\\\\\\\\\\\",\\\\\\\\n            extra: {\\\\\\\\n                inheritTitle: false\\\\\\\\n            }\\\\\\\\n        });\\\\\\\\n    });\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction liebiao2(d, list1) {\\\\\\\\n    list1.forEach(it => {\\\\\\\\n        d.push({\\\\\\\\n            title: it.albumName,\\\\\\\\n            desc: ((it.title || it.albumTitle) || \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\")+\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n集数：\\\\\\\\\\\\\\\"+it.songNum+\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n播放：\\\\\\\\\\\\\\\"+it.playCnt+\\\\\\\\\\\\\\\"万\\\\\\\\\\\\\\\",\\\\\\\\n            img: it.coverImg || it.albumImg,\\\\\\\\n            url: $(\\\\\\\\\\\\\\\"hiker://empty#page=fypage#immersiveTheme#\\\\\\\\\\\\\\\").rule((albumId) => {\\\\\\\\n                let d = [];\\\\\\\\n                $.require(\\\\\\\\\\\\\\\"hanshu\\\\\\\\\\\\\\\").rule2(d, albumId);\\\\\\\\n                setResult(d);\\\\\\\\n            }, it.albumId),\\\\\\\\n            col_type: \\\\\\\\\\\\\\\"movie_1_vertical_pic\\\\\\\\\\\\\\\",\\\\\\\\n            extra: {\\\\\\\\n                inheritTitle: false\\\\\\\\n            }\\\\\\\\n        });\\\\\\\\n    });\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction tuijian1(d) {\\\\\\\\n    let page = MY_PAGE;\\\\\\\\n    if (page === 1) {\\\\\\\\n        let data1 = [\\\\\\\\\\\\\\\"分类\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"热歌神曲\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"排行榜\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"相声评书\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"亲子儿童\\\\\\\\\\\\\\\"];\\\\\\\\n        let img1 = [\\\\\\\\n            \\\\\\\\\\\\\\\"https://icdn.binmt.cc/2506/684a4b934e6ec.png\\\\\\\\\\\\\\\",\\\\\\\\n            \\\\\\\\\\\\\\\"https://icdn.binmt.cc/2506/684a4a02652a8.png\\\\\\\\\\\\\\\",\\\\\\\\n            \\\\\\\\\\\\\\\"https://icdn.binmt.cc/2506/684a4a34c26dc.png\\\\\\\\\\\\\\\",\\\\\\\\n            \\\\\\\\\\\\\\\"https://icdn.binmt.cc/2506/684a4a66b0981.png\\\\\\\\\\\\\\\",\\\\\\\\n            \\\\\\\\\\\\\\\"https://icdn.binmt.cc/2506/684a4a6f54c3b.png\\\\\\\\\\\\\\\"\\\\\\\\n        ];\\\\\\\\n        data1.forEach((it, i) => {\\\\\\\\n            d.push({\\\\\\\\n                title: it,\\\\\\\\n                img: img1[i],\\\\\\\\n                url: $(\\\\\\\\\\\\\\\"hiker://empty#page=fypage#noRecordHistory#\\\\\\\\\\\\\\\").rule((str1) => {\\\\\\\\n                    let d = [];\\\\\\\\n                    $.require(\\\\\\\\\\\\\\\"hanshu\\\\\\\\\\\\\\\").rule1(d, str1);\\\\\\\\n                    setResult(d);\\\\\\\\n                }, it),\\\\\\\\n                col_type: \\\\\\\\\\\\\\\"icon_5\\\\\\\\\\\\\\\"\\\\\\\\n            });\\\\\\\\n        });\\\\\\\\n        d.push({\\\\\\\\n            title: \\\\\\\\\\\\\\\"🔍\\\\\\\\\\\\\\\",\\\\\\\\n            desc: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n            url: $.toString(() => {\\\\\\\\n                return $(\\\\\\\\\\\\\\\"hiker://empty#page=fypage#\\\\\\\\\\\\\\\").rule((str1) => {\\\\\\\\n                    let d = [];\\\\\\\\n                    $.require(\\\\\\\\\\\\\\\"hanshu\\\\\\\\\\\\\\\").search1(d, str1);\\\\\\\\n                    setResult(d);\\\\\\\\n                }, input);\\\\\\\\n            }),\\\\\\\\n            col_type: \\\\\\\\\\\\\\\"input\\\\\\\\\\\\\\\",\\\\\\\\n            extra: {\\\\\\\\n                pageTitle: \\\\\\\\\\\\\\\"高级搜索\\\\\\\\\\\\\\\"\\\\\\\\n            }\\\\\\\\n        });\\\\\\\\n    }\\\\\\\\n    let html1 = get1(\\\\\\\\\\\\\\\"http://tingshu.kuwo.cn/v2/api/product/change/preference/list?moduleIds=4137&uid=2332290085&swiperType=1&appuid=2332290085&bksource=kwbook_ar_9.1.8.1_t87.apk&notrace=0&source=kwplayer_ar_9.1.8.1_t87.apk&version=9.1.8.1&platform=1&kweexVersion=1.1.5\\\\\\\\\\\\\\\");\\\\\\\\n    d.push({\\\\\\\\n        col_type: \\\\\\\\\\\\\\\"line_blank\\\\\\\\\\\\\\\"\\\\\\\\n    });\\\\\\\\n    d.push({\\\\\\\\n        title: apiview.biaoti1(\\\\\\\\\\\\\\\"必听推荐\\\\\\\\\\\\\\\"),\\\\\\\\n        url: \\\\\\\\\\\\\\\"hiker://empty\\\\\\\\\\\\\\\",\\\\\\\\n        col_type: \\\\\\\\\\\\\\\"text_1\\\\\\\\\\\\\\\",\\\\\\\\n        extra: {\\\\\\\\n            lineVisible: false\\\\\\\\n        }\\\\\\\\n    });\\\\\\\\n    liebiao1(d, html1.data.child[0].detail);\\\\\\\\n    let html2 = get1(\\\\\\\\\\\\\\\"http://tingshu.kuwo.cn/v2/api/product/index/data?platform=1&notrace=0&kweexVersion=1.1.5&source=kwplayer_ar_9.1.8.1_t87.apk&rn=20&version=9.1.8.1&pn=1&uid=2645663668&appuid=2645663668&swiperType=1&bksource=kwbook_ar_9.1.8.1_t87.apk\\\\\\\\\\\\\\\"); \\\\\\\\n    html2.data.child.forEach(it => {\\\\\\\\n        if (it.type === \\\\\\\\\\\\\\\"threeResource\\\\\\\\\\\\\\\") {\\\\\\\\n            d.push({\\\\\\\\n                col_type: \\\\\\\\\\\\\\\"line_blank\\\\\\\\\\\\\\\"\\\\\\\\n            });\\\\\\\\n            d.push({\\\\\\\\n                title: apiview.biaoti1(it.label),\\\\\\\\n                url: \\\\\\\\\\\\\\\"hiker://empty\\\\\\\\\\\\\\\",\\\\\\\\n                col_type: \\\\\\\\\\\\\\\"text_1\\\\\\\\\\\\\\\",\\\\\\\\n                extra: {\\\\\\\\n                    lineVisible: false\\\\\\\\n                }\\\\\\\\n            });\\\\\\\\n            liebiao1(d, it.child);\\\\\\\\n        }\\\\\\\\n    });\\\\\\\\n    apiview.toast1();\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction rule1(d, str1) {\\\\\\\\n    addListener('onClose', $.toString(()=>{\\\\\\\\n        clearMyVar('type1');\\\\\\\\n    }));\\\\\\\\n    let page = MY_PAGE;\\\\\\\\n    let tabs, html1;\\\\\\\\n    switch (str1) {\\\\\\\\n        case \\\\\\\\\\\\\\\"分类\\\\\\\\\\\\\\\":\\\\\\\\n            tabs = [{\\\\\\\\n                \\\\\\\\\\\\\\\"title\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"type1\\\\\\\\\\\\\\\",\\\\\\\\n                \\\\\\\\\\\\\\\"names\\\\\\\\\\\\\\\": [\\\\\\\\\\\\\\\"玄幻奇幻\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"武侠仙侠\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"穿越架空\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"都市传说\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"科幻竞技\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"幻想言情\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"独家定制\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"古代言情\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"影视原著\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"悬疑推理\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"历史军事\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"现代言情\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"青春校园\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"文学名著\\\\\\\\\\\\\\\"],\\\\\\\\n                \\\\\\\\\\\\\\\"ids\\\\\\\\\\\\\\\": [\\\\\\\\\\\\\\\"44\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"48\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"52\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"42\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"57\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"169\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"170\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"207\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"213\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"45\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"56\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"41\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"55\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"61\\\\\\\\\\\\\\\"]\\\\\\\\n            }];\\\\\\\\n            if (page === 1) setTabs(d, tabs);\\\\\\\\n            html1 = get1(\\\\\\\\\\\\\\\"http://tingshu.kuwo.cn/v2/api/search/filter/albums?classifyId=\\\\\\\\\\\\\\\"+getMyVar(\\\\\\\\\\\\\\\"type1\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"44\\\\\\\\\\\\\\\")+\\\\\\\\\\\\\\\"&sortType=pubDate&rn=10&pn=\\\\\\\\\\\\\\\"+page);\\\\\\\\n            liebiao2(d, html1.data.data);\\\\\\\\n          break;\\\\\\\\n        case \\\\\\\\\\\\\\\"热歌神曲\\\\\\\\\\\\\\\":\\\\\\\\n            tabs = [{\\\\\\\\n                \\\\\\\\\\\\\\\"title\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"type1\\\\\\\\\\\\\\\",\\\\\\\\n                \\\\\\\\\\\\\\\"names\\\\\\\\\\\\\\\": [\\\\\\\\\\\\\\\"全部分类\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"抖音神曲\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"怀旧老歌\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"创作|翻唱\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"催眠\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"古风\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"播客周刊\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"民谣\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"纯音乐\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"3D电子\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"音乐课程\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"音乐推荐\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"音乐故事\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"情感治愈\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"民谣\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"儿童音乐\\\\\\\\\\\\\\\"],\\\\\\\\n                \\\\\\\\\\\\\\\"ids\\\\\\\\\\\\\\\": [\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"253\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"252\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"248\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"254\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"255\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"1423\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"1409\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"1408\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"249\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"251\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"246\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"247\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"250\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"1380\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"1407\\\\\\\\\\\\\\\"]\\\\\\\\n            }];\\\\\\\\n            if (page === 1) setTabs(d, tabs);\\\\\\\\n            html1 = get1(\\\\\\\\\\\\\\\"http://tingshu.kuwo.cn/v2/api/search/filter/albums?classifyId=\\\\\\\\\\\\\\\"+getMyVar(\\\\\\\\\\\\\\\"type1\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\")+\\\\\\\\\\\\\\\"&rn=10&categoryId=37&pn=\\\\\\\\\\\\\\\"+page);\\\\\\\\n            liebiao2(d, html1.data.data);\\\\\\\\n          break;\\\\\\\\n        case \\\\\\\\\\\\\\\"排行榜\\\\\\\\\\\\\\\":\\\\\\\\n            tabs = storage0.getMyVar('tabs');\\\\\\\\n            if (!tabs) {\\\\\\\\n                tabs = [{\\\\\\\\n                    \\\\\\\\\\\\\\\"title\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"type1\\\\\\\\\\\\\\\",\\\\\\\\n                    \\\\\\\\\\\\\\\"names\\\\\\\\\\\\\\\": [\\\\\\\\\\\\\\\"热播榜\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"免费榜\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"畅销榜\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"男频VIP榜\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"女频VIP榜\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"新品榜\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"精品榜\\\\\\\\\\\\\\\"],\\\\\\\\n                    \\\\\\\\\\\\\\\"ids\\\\\\\\\\\\\\\": [\\\\\\\\\\\\\\\"15\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"16\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"2\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"20\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"21\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"8\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"23\\\\\\\\\\\\\\\"],\\\\\\\\n                    \\\\\\\\\\\\\\\"arr\\\\\\\\\\\\\\\": [\\\\\\\\n                        [{\\\\\\\\n                            \\\\\\\\\\\\\\\"title\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"type2\\\\\\\\\\\\\\\",\\\\\\\\n                            \\\\\\\\\\\\\\\"names\\\\\\\\\\\\\\\": [\\\\\\\\\\\\\\\"有声小说\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"相声评书\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"历史\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"影视原声\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"两性情感\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"人文\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"音乐调频\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"戏曲\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"国漫游戏\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"畅销书\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"脱口秀\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"娱乐段子\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"个人提升\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"儿童\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"学科教育\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"商业财经\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"外语\\\\\\\\\\\\\\\"],\\\\\\\\n                            \\\\\\\\\\\\\\\"ids\\\\\\\\\\\\\\\": [\\\\\\\\\\\\\\\"123\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"126\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"140\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"141\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"129\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"137\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"131\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"139\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"130\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"127\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"785\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"132\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"133\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"125\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"128\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"134\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"138\\\\\\\\\\\\\\\"]\\\\\\\\n                        }],[{\\\\\\\\n                            \\\\\\\\\\\\\\\"title\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"type2\\\\\\\\\\\\\\\",\\\\\\\\n                            \\\\\\\\\\\\\\\"names\\\\\\\\\\\\\\\": [\\\\\\\\\\\\\\\"热门\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"有声小说\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"相声评书\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"戏曲\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"历史\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"人文\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"儿童\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"影视原声\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"两性情感\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"国漫游戏\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"音乐调频\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"脱口秀\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"学科教育\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"个人提升\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"商业财经\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"外语\\\\\\\\\\\\\\\"],\\\\\\\\n                            \\\\\\\\\\\\\\\"ids\\\\\\\\\\\\\\\": [\\\\\\\\\\\\\\\"475\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"476\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"477\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"478\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"479\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"480\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"481\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"482\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"483\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"484\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"485\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"786\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"487\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"488\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"489\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"490\\\\\\\\\\\\\\\"]\\\\\\\\n                        }],[{\\\\\\\\n                            \\\\\\\\\\\\\\\"title\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"type2\\\\\\\\\\\\\\\",\\\\\\\\n                            \\\\\\\\\\\\\\\"names\\\\\\\\\\\\\\\": [\\\\\\\\\\\\\\\"热门\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"都市传说\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"玄幻奇幻\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"现代言情\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"悬疑推理\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"古代言情\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"武侠仙侠\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"历史军事\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"儿童\\\\\\\\\\\\\\\"],\\\\\\\\n                            \\\\\\\\\\\\\\\"ids\\\\\\\\\\\\\\\": [\\\\\\\\\\\\\\\"91\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"72\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"69\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"73\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"76\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"74\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"75\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"77\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"16\\\\\\\\\\\\\\\"]\\\\\\\\n                        }],[{\\\\\\\\n                            \\\\\\\\\\\\\\\"title\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"type2\\\\\\\\\\\\\\\",\\\\\\\\n                            \\\\\\\\\\\\\\\"names\\\\\\\\\\\\\\\": [\\\\\\\\\\\\\\\"男频热播\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"都市传说\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"玄幻仙侠\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"恐怖悬疑\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"历史军事\\\\\\\\\\\\\\\"],\\\\\\\\n                            \\\\\\\\\\\\\\\"ids\\\\\\\\\\\\\\\": [\\\\\\\\\\\\\\\"839\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"842\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"843\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"844\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"846\\\\\\\\\\\\\\\"]\\\\\\\\n                        }],[{\\\\\\\\n                            \\\\\\\\\\\\\\\"title\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"type2\\\\\\\\\\\\\\\",\\\\\\\\n                            \\\\\\\\\\\\\\\"names\\\\\\\\\\\\\\\": [\\\\\\\\\\\\\\\"女频热播\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"总裁萌宝\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"穿越重生\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"中短篇\\\\\\\\\\\\\\\"],\\\\\\\\n                            \\\\\\\\\\\\\\\"ids\\\\\\\\\\\\\\\": [\\\\\\\\\\\\\\\"848\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"850\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"852\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"854\\\\\\\\\\\\\\\"]\\\\\\\\n                        }],[{\\\\\\\\n                            \\\\\\\\\\\\\\\"title\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"type2\\\\\\\\\\\\\\\",\\\\\\\\n                            \\\\\\\\\\\\\\\"names\\\\\\\\\\\\\\\": [\\\\\\\\\\\\\\\"热门\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"有声小说\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"相声\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"评书\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"历史\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"人文\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"儿童\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"影视原声\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"两性情感\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"音乐调频\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"广播剧\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"教育\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"畅销书\\\\\\\\\\\\\\\"],\\\\\\\\n                            \\\\\\\\\\\\\\\"ids\\\\\\\\\\\\\\\": [\\\\\\\\\\\\\\\"92\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"93\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"594\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"595\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"596\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"597\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"95\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"568\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"98\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"564\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"593\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"565\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"96\\\\\\\\\\\\\\\"]\\\\\\\\n                        }],[{\\\\\\\\n                            \\\\\\\\\\\\\\\"title\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"type2\\\\\\\\\\\\\\\",\\\\\\\\n                            \\\\\\\\\\\\\\\"names\\\\\\\\\\\\\\\": [\\\\\\\\\\\\\\\"全部\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"都市传说\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"玄幻仙侠\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"悬疑灵异\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"言情精选\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"历史军事\\\\\\\\\\\\\\\"],\\\\\\\\n                            \\\\\\\\\\\\\\\"ids\\\\\\\\\\\\\\\": [\\\\\\\\\\\\\\\"861\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"856\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"857\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"858\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"859\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"860\\\\\\\\\\\\\\\"]\\\\\\\\n                        }]\\\\\\\\n                    ]\\\\\\\\n                }];\\\\\\\\n                storage0.putMyVar('tabs', tabs);\\\\\\\\n            }\\\\\\\\n            if (page === 1) setTabs(d, tabs);\\\\\\\\n            html1 = get1(\\\\\\\\\\\\\\\"http://tingshu.kuwo.cn/v2/api/product/rank/dataList?tabId=\\\\\\\\\\\\\\\"+getMyVar(\\\\\\\\\\\\\\\"type1\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"15\\\\\\\\\\\\\\\")+\\\\\\\\\\\\\\\"&id=\\\\\\\\\\\\\\\"+getMyVar(\\\\\\\\\\\\\\\"type2\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"123\\\\\\\\\\\\\\\")+\\\\\\\\\\\\\\\"&rn=10&pn=\\\\\\\\\\\\\\\"+page);\\\\\\\\n            liebiao2(d, html1.data.rankDataList);\\\\\\\\n          break;\\\\\\\\n        case \\\\\\\\\\\\\\\"相声评书\\\\\\\\\\\\\\\":\\\\\\\\n            tabs = [{\\\\\\\\n                \\\\\\\\\\\\\\\"title\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"type1\\\\\\\\\\\\\\\",\\\\\\\\n                \\\\\\\\\\\\\\\"names\\\\\\\\\\\\\\\": [\\\\\\\\\\\\\\\"全部分类\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"郭德纲\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"相声新人\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"张少佐\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"刘立福\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"评书大全\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"小品合辑\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"刘兰芳\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"连丽如\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"田占义\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"单口相声\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"袁阔成\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"孙一\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"王玥波\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"单田芳\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"热门相声\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"相声名家\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"粤语评书\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"关永超\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"马长辉\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"赵维莉\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"单口相声\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"潮剧\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"沪剧\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"晋剧\\\\\\\\\\\\\\\"],\\\\\\\\n                \\\\\\\\\\\\\\\"ids\\\\\\\\\\\\\\\": [\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"84\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"222\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"313\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"314\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"220\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"221\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"309\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"311\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"317\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"219\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"310\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"315\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"316\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"217\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"218\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"290\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"320\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"325\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"326\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"327\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"1536\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"1718\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"1719\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"1720\\\\\\\\\\\\\\\"]\\\\\\\\n            }];\\\\\\\\n            if (page === 1) setTabs(d, tabs);\\\\\\\\n            html1 = get1(\\\\\\\\\\\\\\\"http://tingshu.kuwo.cn/v2/api/search/filter/albums?classifyId=\\\\\\\\\\\\\\\"+getMyVar(\\\\\\\\\\\\\\\"type1\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\")+\\\\\\\\\\\\\\\"&sortType=playCnt&rn=10&categoryId=5&pn=\\\\\\\\\\\\\\\"+page);\\\\\\\\n            liebiao2(d, html1.data.data);\\\\\\\\n          break;\\\\\\\\n        case \\\\\\\\\\\\\\\"亲子儿童\\\\\\\\\\\\\\\":\\\\\\\\n            tabs = [{\\\\\\\\n                \\\\\\\\\\\\\\\"title\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"type1\\\\\\\\\\\\\\\",\\\\\\\\n                \\\\\\\\\\\\\\\"names\\\\\\\\\\\\\\\": [\\\\\\\\\\\\\\\"全部分类\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"益智故事\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"科普知识\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"国学经典\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"卡通动画\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"儿童教育\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"英语启蒙\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"早教启蒙\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"轻松哄睡\\\\\\\\\\\\\\\"],\\\\\\\\n                \\\\\\\\\\\\\\\"ids\\\\\\\\\\\\\\\": [\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"209\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"83\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"2\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"282\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"4\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"12\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"385\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"210\\\\\\\\\\\\\\\"]\\\\\\\\n            }];\\\\\\\\n            if (page === 1) setTabs(d, tabs);\\\\\\\\n            html1 = get1(\\\\\\\\\\\\\\\"http://tingshu.kuwo.cn/v2/api/search/filter/albums?classifyId=\\\\\\\\\\\\\\\"+getMyVar(\\\\\\\\\\\\\\\"type1\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\")+\\\\\\\\\\\\\\\"&sortType=playCnt&rn=10&categoryId=1&pn=\\\\\\\\\\\\\\\"+page);\\\\\\\\n            liebiao2(d, html1.data.data);\\\\\\\\n          break;\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction rule2(d, str1) {\\\\\\\\n    let page = MY_PAGE - 1;\\\\\\\\n    let html1 = get1(\\\\\\\\\\\\\\\"http://search.kuwo.cn/r.s?stype=albuminfo&user=5b5fef483f589107&uid=2645060848&loginUid=0&loginSid=null&prod=kwplayer_ar_9.1.8.1&bkprod=kwbook_ar_9.1.8.1&source=kwplayer_ar_9.1.8.1_t87.apk&bksource=kwbook_ar_9.1.8.1_t87.apk&corp=kuwo&albumid=\\\\\\\\\\\\\\\"+str1+\\\\\\\\\\\\\\\"&pn=\\\\\\\\\\\\\\\"+page+\\\\\\\\\\\\\\\"&rn=100&show_copyright_off=1&vipver=MUSIC_8.2.0.0_BCS17&mobi=1&sortby=3&show_digitalmusic_off=1&iskwbook=1\\\\\\\\\\\\\\\"); \\\\\\\\n    if (page === 0) {\\\\\\\\n        d.push({\\\\\\\\n            title: html1.name,\\\\\\\\n            desc: html1.title+\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n集数：\\\\\\\\\\\\\\\"+html1.songnum,\\\\\\\\n            img: html1.img,\\\\\\\\n            url: \\\\\\\\\\\\\\\"hiker://empty\\\\\\\\\\\\\\\",\\\\\\\\n            col_type: \\\\\\\\\\\\\\\"movie_1_vertical_pic_blur\\\\\\\\\\\\\\\",\\\\\\\\n            extra: {\\\\\\\\n                gradient: true\\\\\\\\n            }\\\\\\\\n        });\\\\\\\\n        setDesc(d, html1.info);\\\\\\\\n    }\\\\\\\\n    html1.musiclist.forEach(it => {\\\\\\\\n        d.push({\\\\\\\\n            title: it.name,\\\\\\\\n            url: $(\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\").lazyRule((musicrid) => {\\\\\\\\n                let {\\\\\\\\n                    get1\\\\\\\\n                } = $.require(\\\\\\\\\\\\\\\"hanshu\\\\\\\\\\\\\\\");\\\\\\\\n                function formatToMinSecMs(secondsFloat) {\\\\\\\\n                  let minutes = Math.floor(secondsFloat / 60);\\\\\\\\n                  let seconds = Math.floor(secondsFloat % 60);\\\\\\\\n                  let milliseconds = Math.round((secondsFloat % 1) * 1000);\\\\\\\\n                  let pad2 = num => String(num).padStart(2, '0');\\\\\\\\n                  let pad3 = num => String(num).padStart(3, '0');\\\\\\\\n                  return `[${pad2(minutes)}:${pad2(seconds)}.${pad3(milliseconds)}]`;\\\\\\\\n                }\\\\\\\\n                let play1 = get1(\\\\\\\\\\\\\\\"http://mobi.kuwo.cn/mobi.s?f=web&source=longzhukhjgkjhlsd_jiakong.apk&type=convert_url_with_sign&rid=\\\\\\\\\\\\\\\"+musicrid+\\\\\\\\\\\\\\\"&br=128kmp3\\\\\\\\\\\\\\\").data.url;\\\\\\\\n                let html1 = get1(\\\\\\\\\\\\\\\"https://www.kuwo.cn/openapi/v1/www/lyric/getlyric?musicId=\\\\\\\\\\\\\\\"+musicrid+\\\\\\\\\\\\\\\"&httpsStatus=1&plat=web_www&from\\\\\\\\\\\\\\\"); //log(html1)\\\\\\\\n                if (html1.data.lrclist) {\\\\\\\\n                    try {\\\\\\\\n                        let lrclist = [];\\\\\\\\n                        html1.data.lrclist.forEach(it => {\\\\\\\\n                            lrclist.push(`${formatToMinSecMs(it.time)} ${it.lineLyric}`);\\\\\\\\n                        });\\\\\\\\n                        return JSON.stringify({\\\\\\\\n                            urls: [play1 + \\\\\\\\\\\\\\\"#isMusic=true#\\\\\\\\\\\\\\\"],\\\\\\\\n                            lyric: lrclist.join(\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\")\\\\\\\\n                        });\\\\\\\\n                    } catch(e) {\\\\\\\\n                        log(e.message);\\\\\\\\n                        if (/http/.test(play1)) return play1 + \\\\\\\\\\\\\\\"#isMusic=true#\\\\\\\\\\\\\\\";\\\\\\\\n                    }\\\\\\\\n                } else {\\\\\\\\n                    if (/http/.test(play1)) return play1 + \\\\\\\\\\\\\\\"#isMusic=true#\\\\\\\\\\\\\\\";\\\\\\\\n                }\\\\\\\\n            }, it.musicrid),\\\\\\\\n            col_type: \\\\\\\\\\\\\\\"text_1\\\\\\\\\\\\\\\"\\\\\\\\n        });\\\\\\\\n    });\\\\\\\\n}\\\\\\\\n\\\\\\\\n// 搜索页面\\\\\\\\nfunction search1(d, str1) {\\\\\\\\n    addListener('onClose', $.toString(()=>{\\\\\\\\n        clearMyVar(\\\\\\\\\\\\\\\"search_word\\\\\\\\\\\\\\\");\\\\\\\\n    }));\\\\\\\\n    let page = MY_PAGE - 1;\\\\\\\\n    if (page === 0) {\\\\\\\\n        d.push({\\\\\\\\n            title: \\\\\\\\\\\\\\\"🔍\\\\\\\\\\\\\\\",\\\\\\\\n            desc: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n            url: $.toString(() => {\\\\\\\\n                clearMyVar(\\\\\\\\\\\\\\\"HasMore\\\\\\\\\\\\\\\");\\\\\\\\n                putMyVar(\\\\\\\\\\\\\\\"search_word\\\\\\\\\\\\\\\", input);\\\\\\\\n                refreshPage();\\\\\\\\n                return \\\\\\\\\\\\\\\"hiker://empty\\\\\\\\\\\\\\\";\\\\\\\\n            }),\\\\\\\\n            col_type: \\\\\\\\\\\\\\\"input\\\\\\\\\\\\\\\",\\\\\\\\n            extra: {\\\\\\\\n                defaultValue: getMyVar(\\\\\\\\\\\\\\\"search_word\\\\\\\\\\\\\\\", str1)\\\\\\\\n            }\\\\\\\\n        });\\\\\\\\n    }\\\\\\\\n    let html1 = get1(\\\\\\\\\\\\\\\"http://search.kuwo.cn/r.s?client=kt&all=\\\\\\\\\\\\\\\"+getMyVar(\\\\\\\\\\\\\\\"search_word\\\\\\\\\\\\\\\", str1)+\\\\\\\\\\\\\\\"&ft=album&newsearch=1&itemset=web_2013&pn=\\\\\\\\\\\\\\\"+page+\\\\\\\\\\\\\\\"&rn=20&rformat=json&encoding=utf8&show_series_listen=1&mobi=1\\\\\\\\\\\\\\\");\\\\\\\\n    html1.albumlist.forEach(it => {\\\\\\\\n        d.push({\\\\\\\\n            title: it.name,\\\\\\\\n            desc: \\\\\\\\\\\\\\\"作者：\\\\\\\\\\\\\\\"+it.artist+\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n集数：\\\\\\\\\\\\\\\"+it.musiccnt,\\\\\\\\n            img: it.img,\\\\\\\\n            url: $(\\\\\\\\\\\\\\\"hiker://empty#page=fypage#noHistory##immersiveTheme#\\\\\\\\\\\\\\\").rule((albumid) => {\\\\\\\\n                let d = [];\\\\\\\\n                $.require(\\\\\\\\\\\\\\\"hanshu\\\\\\\\\\\\\\\").rule2(d, albumid);\\\\\\\\n                setResult(d);\\\\\\\\n            }, it.albumid),\\\\\\\\n            col_type: \\\\\\\\\\\\\\\"movie_1_vertical_pic\\\\\\\\\\\\\\\",\\\\\\\\n            extra: {\\\\\\\\n                inheritTitle: false\\\\\\\\n            }\\\\\\\\n        });\\\\\\\\n    });\\\\\\\\n    apiview.toast1();\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction getRangeColors() {\\\\\\\\n    return '#' + ('00000' + (Math.random() * 0x1000000 << 0).toString(16)).substr(-6);\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction setTabs(d, tabs) {\\\\\\\\n    if (!tabs) return;\\\\\\\\n    for (let data of tabs) {\\\\\\\\n        getMyVar(data.title) || putMyVar(data.title, data.ids[0]);\\\\\\\\n        for (let i = 0; i < data.names.length; i++) {\\\\\\\\n            d.push({\\\\\\\\n                title: getMyVar(data.title) === data.ids[i] ? `““””<font color=\\\\\\\\\\\\\\\"${getRangeColors()}\\\\\\\\\\\\\\\"><b>${data.names[i]}</b></font>` : data.names[i],\\\\\\\\n                url: $('#noLoading#').lazyRule((title, id) => {\\\\\\\\n                    if (getMyVar('type1') !== id) {\\\\\\\\n                        clearMyVar('type2');\\\\\\\\n                    }\\\\\\\\n                    if (getMyVar(title) !== id) {\\\\\\\\n                        putMyVar(title, id);\\\\\\\\n                        refreshPage();\\\\\\\\n                    }\\\\\\\\n                    refreshPage();\\\\\\\\n                    return 'hiker://empty';\\\\\\\\n                }, data.title, data.ids[i]),\\\\\\\\n                col_type: 'scroll_button'\\\\\\\\n            });\\\\\\\\n        }\\\\\\\\n        d.push({\\\\\\\\n            col_type: 'blank_block'\\\\\\\\n        });\\\\\\\\n        if (data.arr) {\\\\\\\\n            setTabs(d, data.arr[data.ids.indexOf(getMyVar(data.title))]);\\\\\\\\n        }\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction setDesc(d, desc, num) {\\\\\\\\n    //log(desc)\\\\\\\\n    if (desc == undefined) {\\\\\\\\n        return;\\\\\\\\n    }\\\\\\\\n    desc = desc.constructor == Array ? desc.join('<br>') : desc;\\\\\\\\n    if (desc.replace(/(<br>|\\\\\\\\\\\\\\\\s+|<\\\\\\\\\\\\\\\\/?p>|&nbsp;)/g, '').length == 0) {\\\\\\\\n        return;\\\\\\\\n    }\\\\\\\\n    const mark = 'desc';\\\\\\\\n    num = typeof(num) == 'undefined' ? 45 : num\\\\\\\\n    desc = desc.startsWith('　　') ? desc : '　　' + desc;\\\\\\\\n    desc = desc.replace(/'/g, \\\\\\\\\\\\\\\"&#39;\\\\\\\\\\\\\\\");\\\\\\\\n    desc = desc.replace(/\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n/g, \\\\\\\\\\\\\\\"<br>\\\\\\\\\\\\\\\");\\\\\\\\n    desc = desc.replace(/\\\\\\\\\\\\\\\\r/g, \\\\\\\\\\\\\\\"<br>\\\\\\\\\\\\\\\");\\\\\\\\n    desc = desc.replace(/\\\\\\\\\\\\\\\\n/g, \\\\\\\\\\\\\\\"<br>\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\n    function substr(str, maxLength) {\\\\\\\\n        let len = 0;\\\\\\\\n        for (let i = 0; i < str.length; i++) {\\\\\\\\n            if (str.charCodeAt(i) > 255) {\\\\\\\\n                len += 2;\\\\\\\\n            } else {\\\\\\\\n                len++;\\\\\\\\n            }\\\\\\\\n            if (len > maxLength) {\\\\\\\\n                return str.slice(0, i) + '...';\\\\\\\\n            }\\\\\\\\n        }\\\\\\\\n        return str;\\\\\\\\n    }\\\\\\\\n    let sdesc = substr(desc, num);\\\\\\\\n    var colors = {\\\\\\\\n        show: \\\\\\\\\\\\\\\"black\\\\\\\\\\\\\\\",\\\\\\\\n        hide: \\\\\\\\\\\\\\\"grey\\\\\\\\\\\\\\\"\\\\\\\\n    }\\\\\\\\n    var lazy = $(`#noLoading#`).lazyRule((dc, sdc, m, cs) => {\\\\\\\\n        var show = storage0.getItem(m, '0');\\\\\\\\n        var title = findItem('desc').title;\\\\\\\\n        var re = /(<\\\\\\\\\\\\\\\\/small><br>.*?>).+/g;\\\\\\\\n        var exp = '展开:';\\\\\\\\n        var ret = '收起:';\\\\\\\\n        if (show == '1') {\\\\\\\\n            updateItem('desc', {\\\\\\\\n                title: title\\\\\\\\n                    .replace(ret, exp)\\\\\\\\n                    .replace(re, '$1' + sdc + '</small>')\\\\\\\\n                    .replace(/(<\\\\\\\\\\\\\\\\/small><br>\\\\\\\\\\\\\\\\<font color=\\\\\\\\\\\\\\\").*?(\\\\\\\\\\\\\\\">)/, '$1' + cs.hide + '$2')\\\\\\\\n            })\\\\\\\\n            storage0.setItem(m, '0');\\\\\\\\n        } else {\\\\\\\\n            updateItem('desc', {\\\\\\\\n                title: title\\\\\\\\n                    .replace(exp, ret)\\\\\\\\n                    .replace(re, '$1' + dc + '</small>')\\\\\\\\n                    .replace(/(<\\\\\\\\\\\\\\\\/small><br>\\\\\\\\\\\\\\\\<font color=\\\\\\\\\\\\\\\").*?(\\\\\\\\\\\\\\\">)/, '$1' + cs.show + '$2')\\\\\\\\n            })\\\\\\\\n            storage0.setItem(m, '1');\\\\\\\\n        }\\\\\\\\n        return `hiker://empty`\\\\\\\\n    }, desc, sdesc, mark, colors)\\\\\\\\n    var sc = storage0.getItem(mark, '0') == '0' ? '展开:' : '收起:';\\\\\\\\n    var dc = storage0.getItem(mark, '0') == '0' ? sdesc : desc;\\\\\\\\n    var cs = storage0.getItem(mark, '0') == '0' ? colors.hide : colors.show;\\\\\\\\n    d.push({\\\\\\\\n        title: '' + '<b><font color=\\\\\\\\\\\\\\\"#098AC1\\\\\\\\\\\\\\\">∷剧情简介\\\\\\\\t</font></b>' + \\\\\\\\\\\\\\\"<small><a style='text-decoration: none;' href='\\\\\\\\\\\\\\\" + lazy + \\\\\\\\\\\\\\\"'>\\\\\\\\\\\\\\\" + sc + '</a></small><br><font color=\\\\\\\\\\\\\\\"' + cs + '\\\\\\\\\\\\\\\">' + `${dc}` + '</small>',\\\\\\\\n        col_type: 'rich_text',\\\\\\\\n        extra: {\\\\\\\\n            id: 'desc',\\\\\\\\n            lineSpacing: 6,\\\\\\\\n            textSize: 15,\\\\\\\\n            lineVisible: true,\\\\\\\\n        }\\\\\\\\n    })\\\\\\\\n}\\\\\\\\n\\\\\\\\n$.exports = {\\\\\\\\n    apiview,\\\\\\\\n    get1,\\\\\\\\n    liebiao1,\\\\\\\\n    liebiao2,\\\\\\\\n    tuijian1,\\\\\\\\n    rule1,\\\\\\\\n    rule2,\\\\\\\\n    search1\\\\\\\\n}\\\\\\\"}]\\\",\\n    \\\"proxy\\\": \\\"\\\",\\n    \\\"icon\\\": \\\"data:image/png;base64,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\\\"\\n}, {\\n    \\\"last_chapter_rule\\\": \\\"js:\\\\nvar html = getResCode();\\\\nvar title = pdfh(html, '#mulu--span&&.audio_name,-1&&Text').replace(/.*?(\\\\\\\\d+.*)/ ,'$1')\\\\n\\\\nsetResult(\\\\\\\"更新至: \\\\\\\" + title)\\\",\\n    \\\"title\\\": \\\"飞卢听书\\\",\\n    \\\"author\\\": \\\"ZF\\\",\\n    \\\"version\\\": 0,\\n    \\\"type\\\": \\\"music\\\",\\n    \\\"url\\\": \\\"https://ts.faloo.com/category/fyAll/fypage.html\\\",\\n    \\\"col_type\\\": \\\"movie_3\\\",\\n    \\\"class_name\\\": \\\"玄幻奇幻&武侠仙侠&都市言情&青春校园&\\\",\\n    \\\"class_url\\\": \\\"1&6&4&7&\\\",\\n    \\\"area_name\\\": \\\"军事历史&科幻网游&耽美同人&恐怖灵异&\\\",\\n    \\\"area_url\\\": \\\"3&2&44&5&\\\",\\n    \\\"sort_name\\\": \\\"\\\",\\n    \\\"year_name\\\": \\\"短篇&古典大作&\\\",\\n    \\\"sort_url\\\": \\\"\\\",\\n    \\\"year_url\\\": \\\"9&54&\\\",\\n    \\\"find_rule\\\": \\\"js:\\\\nvar d = [];\\\\nhtml = getResCode();\\\\nconst list = pdfa(html, 'body&&.audio_info_l')\\\\nlist.forEach(data => {\\\\n    d.push({\\\\n        title: pdfh(data, 'a&&title'),\\\\n        desc: pdfh(data, '.audio_intr2&&span,1&&Text'),\\\\n        img: pd(data, 'img&&src') + '@Referer=',\\\\n        url: pd(data, 'a&&href') + \\\\\\\"#immersiveTheme##autoCache#\\\\\\\",\\\\n        col_type: '',\\\\n        extra: {\\\\n            longClick: [{\\\\n                title: '聚阅搜索：' + pdfh(data, 'a&&title'),\\\\n                js: $.toString((title) => {\\\\n                    return 'hiker://page/sousuopage?rule=聚阅√&keyword='+title+'&type=听书'\\\\n                }, pdfh(data, 'a&&title'))\\\\n            }]\\\\n        }\\\\n    })\\\\n})\\\\nsetResult(d)\\\",\\n    \\\"searchFind\\\": \\\"js:\\\\nvar d = [];\\\\nhtml = getResCode();\\\\nconst list = pdfa(html, 'body&&.audio_info_l')\\\\nlist.forEach(data => {\\\\n    d.push({\\\\n        title: pdfh(data, 'a&&title'),\\\\n        desc: pdfh(data, '.audio_intr2&&span,1&&Text'),\\\\n        img: pd(data, 'img&&src') + '@Referer=',\\\\n        url: pd(data, 'a&&href') + \\\\\\\"#immersiveTheme##autoCache#\\\\\\\",\\\\n        col_type: '',\\\\n    })\\\\n})\\\\nsetResult(d)\\\",\\n    \\\"search_url\\\": \\\"https://ts.faloo.com/category/0/fypage.html?k=**;get;gbk\\\",\\n    \\\"group\\\": \\\"#听书\\\",\\n    \\\"detail_col_type\\\": \\\"text_4\\\",\\n    \\\"detail_find_rule\\\": \\\"js:\\\\nvar d = [];\\\\nvar html = getResCode();\\\\neval(JSON.parse(fetch('hiker://page/lazy', {})).rule);\\\\n\\\\nlet 简介 = '.jieshao&&Text'\\\\n\\\\nvar list = pdfa(html, '#mulu&&ul')\\\\nfunction chunkArray(array, size) {\\\\n    const chunkedArrays = [];\\\\n    for (let i = 0; i < array.length; i += size) {\\\\n        chunkedArrays.push(array.slice(i, i + size));\\\\n    }\\\\n    return chunkedArrays;\\\\n}\\\\nvar lists = chunkArray(list, 100)\\\\nvar tabs = [];\\\\nfor (var i in lists) {\\\\nvar aa = (Number(i)+1)+'00'\\\\nvar bb = (i+'00').replace(/^000/ ,'1')\\\\n    tabs.push(bb+'-'+aa)\\\\n}\\\\ntry {\\\\n    d.push({\\\\n        title: pdfh(html, '.audio_auther&&Text').substring(0, 18) +\\\\n            '\\\\\\\\n' +\\\\n            '\\\\\\\\n' +\\\\n            pdfh(html,\\\\n                '.audio_auther,1&&Text').substring(0, 18),\\\\n        desc: pdfh(html, '.audio_auther,2&&Text'),\\\\n        img: pd(html,\\\\n            '.d_audio_img&&img&&src') + '@Referer=',\\\\n        url: 'hiker://search?s='+ pdfh(html, '.audio_name&&Text')+ ' 听书&rule=聚阅√',\\\\n        col_type: 'movie_1_vertical_pic_blur',\\\\n        extra: {\\\\n            gradient: true\\\\n        }\\\\n    });\\\\n} catch (e) {}\\\\nd.push({\\\\n    title: '‘‘’’<small><font color=\\\\\\\"#ff148e8e\\\\\\\">简介：' + pdfh(html, 简介).substr(0, 55) + '...</font><small><font color=\\\\\\\"red\\\\\\\">详情</font></small></small>',\\\\n    url: 'hiker://empty#' + '\\\\\\\\n' + pdfh(html, 简介) + '#noHistory#' + `@rule=js: var d = [];d.push({title:'影片简介：'+ MY_URL.split('#')[1],col_type: 'long_text'}); setResult(d);`,\\\\n    col_type: 'text_1'\\\\n});\\\\nvar type = getItem(\\\\\\\"col_type\\\\\\\", \\\\\\\"text_4\\\\\\\")\\\\naddListener(\\\\\\\"onClose\\\\\\\", $.toString(() => {\\\\n    clearMyVar(\\\\\\\"lists\\\\\\\");\\\\n}));\\\\nstorage0.putMyVar(\\\\\\\"lists\\\\\\\", lists);\\\\nvar list = lists[getMyVar(MY_URL, '0')];\\\\nvar 排序 = getMyVar(MY_URL + \\\\\\\"章节排序\\\\\\\", '#1aad19\\\\\\\">正序');\\\\nvar 提示 = 排序 == '#FF0000\\\\\\\">倒序' ? '#1aad19\\\\\\\">正序' : '#FF0000\\\\\\\">倒序';\\\\nvar 排序名 = '““””<b><span style=\\\\\\\"color:排序</span></b>'\\\\n\\\\nd.push({\\\\n    title: '““””<b><span style=\\\\\\\"color: ' + 排序 + '</span></b>',\\\\n    url: $(\\\\\\\"#noLoading#\\\\\\\").lazyRule((tabs, 排序名, lazy, d, type) => {\\\\n        var lists = storage0.getMyVar(\\\\\\\"lists\\\\\\\");\\\\n        let 章节 = lists[getMyVar(MY_URL, '0')];\\\\n        var 排序 = getMyVar(MY_URL + \\\\\\\"章节排序\\\\\\\", '#1aad19\\\\\\\">正序');\\\\n        var 提示 = 排序 == '#FF0000\\\\\\\">倒序' ? '#1aad19\\\\\\\">正序' : '#FF0000\\\\\\\">倒序';\\\\n        updateItem({\\\\n            extra: {\\\\n                id: MY_URL + \\\\\\\"_排序\\\\\\\",\\\\n            },\\\\n            title: 排序名.replace('排序', 提示)\\\\n        })\\\\n        章节 = 排序 == '#1aad19\\\\\\\">正序' ? 章节.reverse() : 章节;\\\\n        var lists = storage0.getMyVar(\\\\\\\"lists\\\\\\\");\\\\n        let cp = 章节.map((data, id) => {\\\\nvar idd = pdfh(data, 'ul&&id').split('_')[1]\\\\n            return {\\\\n                title: pdfh(data, '.audio_name--span&&Text').replace(/第(\\\\\\\\d+)集.*/, '$1').replace(/第(\\\\\\\\d+)章.*/, '$1').replace(/第(\\\\\\\\d+)回.*/, '$1')\\\\n                .replace('第', '')\\\\n                .replace('期', ''),\\\\n                    url: pd(lists[0][0], 'input&&value').replace(/(\\\\\\\\d+)\\\\\\\\./, idd + '.'),\\\\n                    col_type: type,\\\\n                extra: {\\\\n                    cls: MY_URL + \\\\\\\"_选集\\\\\\\",\\\\n                    id: pd(章节[0], 'a&&href'),\\\\n                    js:  ` document.querySelector(\\\\\\\"button\\\\\\\").click()` \\\\n                }\\\\n            };\\\\n        });\\\\n        deleteItemByCls(MY_URL + \\\\\\\"_选集\\\\\\\");\\\\n        addItemBefore(MY_URL + \\\\\\\"footer\\\\\\\", cp);\\\\n        putMyVar(MY_URL + \\\\\\\"章节排序\\\\\\\", 提示)\\\\n        return \\\\\\\"hiker://empty\\\\\\\"\\\\n    }, tabs, 排序名, lazy, d[0], type),\\\\n    col_type: 'flex_button',\\\\n    extra: {\\\\n        id: MY_URL + \\\\\\\"_排序\\\\\\\",\\\\n    }\\\\n})\\\\nd.push({\\\\n        title: \\\\\\\"样式🎨\\\\\\\",\\\\n        url: $([\\\\\\\"text_1\\\\\\\", \\\\\\\"text_2\\\\\\\", \\\\\\\"text_3\\\\\\\", \\\\\\\"text_4\\\\\\\", \\\\\\\"text_5\\\\\\\", \\\\\\\"text_center_1\\\\\\\", \\\\\\\"avatar\\\\\\\", \\\\\\\"text_icon\\\\\\\"], 2).select(() => {\\\\n            setItem(\\\\\\\"col_type\\\\\\\", input)\\\\n            refreshPage()\\\\n            return \\\\\\\"toast://已切换\\\\\\\"\\\\n        }),\\\\n        col_type: \\\\\\\"flex_button\\\\\\\"\\\\n    })\\\\n\\\\ntabs.forEach((data, id) => {\\\\n    d.push({\\\\n        title: getMyVar(MY_URL, '0') == id ? '““' + data + '””' : data,\\\\n        url: $(\\\\\\\"#noLoading#\\\\\\\").lazyRule((线路, lazy, id, type) => {\\\\n            var lists = storage0.getMyVar(\\\\\\\"lists\\\\\\\");\\\\n            var 排序 = getMyVar(MY_URL + \\\\\\\"章节排序\\\\\\\", '#1aad19\\\\\\\">正序');\\\\n            var 提示 = 排序 == '#FF0000\\\\\\\">倒序' ? '#1aad19\\\\\\\">正序' : '#FF0000\\\\\\\">倒序';\\\\n            线路.forEach((data, xlid) => {\\\\n                updateItem({\\\\n                    title: id == xlid ? '““' + data + '””' : data,\\\\n                    extra: {\\\\n                        id: MY_URL + \\\\\\\"_线路\\\\\\\" + xlid\\\\n                    }\\\\n                });\\\\n            })\\\\n            putMyVar(MY_URL, id)\\\\n            let 章节 = lists[getMyVar(MY_URL, '0')];\\\\n            章节 = 排序 == '#FF0000\\\\\\\">倒序' ? 章节.reverse() : 章节;\\\\n            let cp = 章节.map((data, id) => {\\\\nvar idd = pdfh(data, 'ul&&id').split('_')[1]\\\\n                return {\\\\n                    title: pdfh(data, '.audio_name--span&&Text').replace(/第(\\\\\\\\d+)集.*/, '$1').replace(/第(\\\\\\\\d+)章.*/, '$1').replace(/第(\\\\\\\\d+)回.*/, '$1')\\\\n                .replace('第', '')\\\\n                .replace('期', ''),\\\\n                    url: pdfh(lists[0][0], 'input&&value').replace(/(\\\\\\\\d+)\\\\\\\\./, idd + '.'),\\\\n                    col_type: type,\\\\n                    extra: {\\\\n                        cls: MY_URL + \\\\\\\"_选集\\\\\\\",\\\\n                        id: pd(data, 'a&&href'),\\\\n                        js:  ` document.querySelector(\\\\\\\"button\\\\\\\").click()` \\\\n                    }\\\\n                };\\\\n            });\\\\n\\\\n            deleteItemByCls(MY_URL + \\\\\\\"_选集\\\\\\\");\\\\n            addItemBefore(MY_URL + \\\\\\\"footer\\\\\\\", cp);\\\\n            return \\\\\\\"hiker://empty\\\\\\\"\\\\n        }, tabs, lazy, id, type),\\\\n        col_type: 'scroll_button',\\\\n        extra: {\\\\n            id: MY_URL + \\\\\\\"_线路\\\\\\\" + id\\\\n        }\\\\n    });\\\\n})\\\\n\\\\nlet list = 排序 === '#FF0000\\\\\\\">倒序' ? list.reverse() : list;\\\\n\\\\nlist.forEach((data, id) => {\\\\nvar idd = pdfh(data, 'ul&&id').split('_')[1]\\\\n    d.push({\\\\n        title: pdfh(data, '.audio_name--span&&Text').replace(/第(\\\\\\\\d+)集.*/, '$1').replace(/第(\\\\\\\\d+)章.*/, '$1').replace(/第(\\\\\\\\d+)回.*/, '$1')\\\\n                .replace('第', '')\\\\n                .replace('期', ''),\\\\n        url: pd(list[0], 'input&&value').replace(/(\\\\\\\\d+)\\\\\\\\./, idd + '.'),\\\\n        col_type: type,\\\\n        extra: {\\\\n            cls: MY_URL + \\\\\\\"_选集\\\\\\\",\\\\n            id: pd(data, 'a&&href'),\\\\n            js:  ` document.querySelector(\\\\\\\"button\\\\\\\").click()`  \\\\n        },\\\\n    });\\\\n})\\\\nd.push({\\\\n    col_type: \\\\\\\"big_blank_block\\\\\\\",\\\\n    extra: {\\\\n        id: MY_URL + \\\\\\\"footer\\\\\\\"\\\\n    }\\\\n});\\\\nsetResult(d);\\\",\\n    \\\"sdetail_col_type\\\": \\\"movie_1\\\",\\n    \\\"sdetail_find_rule\\\": \\\"*\\\",\\n    \\\"ua\\\": \\\"mobile\\\",\\n    \\\"preRule\\\": \\\"\\\",\\n    \\\"pages\\\": \\\"[{\\\\\\\"col_type\\\\\\\":\\\\\\\"movie_3\\\\\\\",\\\\\\\"name\\\\\\\":\\\\\\\"lazy\\\\\\\",\\\\\\\"path\\\\\\\":\\\\\\\"lazy\\\\\\\",\\\\\\\"rule\\\\\\\":\\\\\\\"var lazy = $('').lazyRule((MY_HOME)=> {\\\\\\\\n    var html = JSON.parse(request(input).match(/r player_.*?=(.*?)</)[1])\\\\\\\\n    var url = html.url\\\\\\\\n    if (html.encrypt == '1') {\\\\\\\\n        url = unescape(url);\\\\\\\\n    } else if (html.encrypt == '2') {\\\\\\\\n        url = unescape(base64Decode(url));\\\\\\\\n    }\\\\\\\\n        return url\\\\\\\\n}, MY_HOME)\\\\\\\"}]\\\",\\n    \\\"proxy\\\": \\\"\\\",\\n    \\\"icon\\\": \\\"https://s.faloo.com/novel/favicon.ico\\\"\\n}, {\\n    \\\"firstHeader\\\": \\\"class\\\",\\n    \\\"last_chapter_rule\\\": \\\"js:\\\\nlet code = getResCode();\\\\nlet page = pdfa(code, '.pagination&&li');\\\\nlet page_url = pd(page[page.length-2], 'a&&href');\\\\nlet html = request(page_url);\\\\nlet list = pdfa(html, '.book-list&&>a');\\\\nlet title = pdfh(list[list.length-1],'a&&Text');\\\\nsetResult('最新：'+title);\\\",\\n    \\\"title\\\": \\\"275听书\\\",\\n    \\\"author\\\": \\\"ZF\\\",\\n    \\\"version\\\": 21,\\n    \\\"type\\\": \\\"music\\\",\\n    \\\"url\\\": \\\"https://m.i275.com/category/fyclass/fyarea/fypage.html\\\",\\n    \\\"col_type\\\": \\\"movie_1_vertical_pic\\\",\\n    \\\"class_name\\\": \\\"玄幻奇幻&都市言情&宫斗女频&官场商战&武侠仙侠&刑侦推理&探险科幻&重生穿越&恐怖惊悚&文学历史&两性情感&网游竞技\\\",\\n    \\\"class_url\\\": \\\"6&7&8&9&10&11&12&13&14&15&49&50\\\",\\n    \\\"area_name\\\": \\\"播放最多&最近更新\\\",\\n    \\\"area_url\\\": \\\"3&2\\\",\\n    \\\"sort_name\\\": \\\"\\\",\\n    \\\"year_name\\\": \\\"\\\",\\n    \\\"sort_url\\\": \\\"\\\",\\n    \\\"year_url\\\": \\\"\\\",\\n    \\\"find_rule\\\": \\\"js:\\\\nlet arr = []\\\\nlet list = pdfa(getResCode(), '.list-wrapper&&a');\\\\nlist.forEach(ele => {\\\\n    arr.push({\\\\n        title: `‘‘${pdfh(ele, '.status&&Text')}’’\\\\\\\\t${pdfh(ele, 'a&&title').replace(/有声全集/,'')}`,\\\\n        desc: `${pdfh(ele, '.desc&&Text').substr(0,40)}……\\\\\\\\n<small>‘‘’’${pdfh(ele, '.broadcaster&&Html').replace(/<\\\\\\\\/span/g,'\\\\\\\\t\\\\\\\\t<\\\\\\\\/span')}</small>`,\\\\n        img: pd(ele, 'img&&src'),\\\\n        url: pd(ele, 'a&&href') + `#immersiveTheme##autoCache#@rule=js:$.require('hiker://page/detail')`,\\\\n        extra: {\\\\n            desc: pdfh(ele, '.desc&&Text'),\\\\n            pageTitle: pdfh(ele, 'a&&title')\\\\n        }\\\\n    })\\\\n})\\\\nsetResult(arr)\\\",\\n    \\\"searchFind\\\": \\\"js:\\\\nlet arr = []\\\\nlet list = pdfa(getResCode(), '.list-wrapper&&a');\\\\nlist.forEach(ele => {\\\\n    arr.push({\\\\n        title: pdfh(ele, 'h2&&Text'),\\\\n        desc: pdfh(ele, '.broadcaster&&Text'),\\\\n        content: pdfh(ele, '.desc&&Text'),\\\\n        img: pd(ele, 'img&&src'),\\\\n        url: pd(ele, 'a&&href') + `#immersiveTheme##autoCache#@rule=js:$.require('hiker://page/detail')`,\\\\n        extra: {\\\\n            desc: pdfh(ele, '.desc&&Text'),\\\\n            pageTitle: pdfh(ele, 'a&&title')\\\\n        }\\\\n    })\\\\n})\\\\nsetResult(arr)\\\",\\n    \\\"search_url\\\": \\\"/pc/index/search.html?keyword=**\\\",\\n    \\\"group\\\": \\\"#听书\\\",\\n    \\\"detail_col_type\\\": \\\"movie_1\\\",\\n    \\\"detail_find_rule\\\": \\\"\\\",\\n    \\\"sdetail_col_type\\\": \\\"movie_1\\\",\\n    \\\"sdetail_find_rule\\\": \\\"*\\\",\\n    \\\"ua\\\": \\\"mobile\\\",\\n    \\\"preRule\\\": \\\"\\\",\\n    \\\"pages\\\": \\\"[{\\\\\\\"col_type\\\\\\\":\\\\\\\"movie_3\\\\\\\",\\\\\\\"name\\\\\\\":\\\\\\\"二级\\\\\\\",\\\\\\\"path\\\\\\\":\\\\\\\"detail\\\\\\\",\\\\\\\"rule\\\\\\\":\\\\\\\"js:\\\\\\\\nlet arr = [];\\\\\\\\nlet page_url = getMyVar(MY_URL, MY_URL);\\\\\\\\nlet html = request(page_url);\\\\\\\\naddListener('onClose', $.toString((MY_URL) => {\\\\\\\\n    clearMyVar(MY_URL + 'fold');\\\\\\\\n},MY_URL))\\\\\\\\n\\\\\\\\nfunction setFont(title, color) {\\\\\\\\n    return '‘‘’’<b><font color=' + color + '>' + title + '</front><b>';\\\\\\\\n}\\\\\\\\n\\\\\\\\narr.push({\\\\\\\\n    title: `${pdfh(html, '.book-title&&Text').substr(0, 17)}\\\\\\\\\\\\\\\\n${pdfh(html, '.extra&&Text')}\\\\\\\\\\\\\\\\n${pdfh(html, '.extra,1&&Text')}`,\\\\\\\\n    desc: `${pdfh(html, '.status&&Text')}\\\\\\\\\\\\\\\\n${pdfh(html, '.update-time&&Text')}`,\\\\\\\\n    url: 'hiker://empty',\\\\\\\\n    col_type: 'movie_1_vertical_pic_blur',\\\\\\\\n    img: pd(html, '.book&&img&&src'),\\\\\\\\n    extra: {\\\\\\\\n        gradient: true\\\\\\\\n    }\\\\\\\\n});\\\\\\\\n\\\\\\\\nlet desc = '　　' + MY_PARAMS.desc;\\\\\\\\nlet img = ['https://hikerfans.com/tubiao/system/57.png', 'https://hikerfans.com/tubiao/system/71.png']\\\\\\\\narr.push({\\\\\\\\n    title: '<big><font color=\\\\\\\\\\\\\\\"#4078C0\\\\\\\\\\\\\\\">小说简介</front><big>',\\\\\\\\n    img: img[0],\\\\\\\\n    url: $(\\\\\\\\\\\\\\\"#noLoading#\\\\\\\\\\\\\\\").lazyRule((desc, img) => {\\\\\\\\n        if (getMyVar(MY_URL + 'fold', '0') == 0) {\\\\\\\\n            putMyVar(MY_URL + 'fold', '1');\\\\\\\\n            updateItem(MY_URL + '简介', {\\\\\\\\n                title: desc,\\\\\\\\n            });\\\\\\\\n            updateItem(MY_URL + '小说简介', {\\\\\\\\n                img: img[1],\\\\\\\\n            })\\\\\\\\n        } else {\\\\\\\\n            putMyVar(MY_URL + 'fold', '0');\\\\\\\\n            updateItem(MY_URL + '简介', {\\\\\\\\n                title: desc.substr(0, 45) + '……',\\\\\\\\n            });\\\\\\\\n            updateItem(MY_URL + '小说简介', {\\\\\\\\n                img: img[0],\\\\\\\\n            })\\\\\\\\n        }\\\\\\\\n        return 'hiker://empty'\\\\\\\\n    }, desc, img),\\\\\\\\n    col_type: 'text_icon',\\\\\\\\n    extra: {\\\\\\\\n        id: MY_URL + '小说简介'\\\\\\\\n    }\\\\\\\\n}, {\\\\\\\\n    title: desc.substr(0, 45) + '……',\\\\\\\\n    col_type: 'rich_text',\\\\\\\\n    extra: {\\\\\\\\n        id: MY_URL + '简介'\\\\\\\\n    }\\\\\\\\n});\\\\\\\\n\\\\\\\\neval(JSON.parse(request('hiker://page/lazy')).rule);\\\\\\\\n\\\\\\\\nlet list = pdfa(html, '.book-list&&>a');\\\\\\\\nlist.forEach(data => {\\\\\\\\n    arr.push({\\\\\\\\n        title: pdfh(data, 'a&&Text'),\\\\\\\\n        url: pd(data, 'a&&href') + lazy,\\\\\\\\n        col_type: 'text_5'\\\\\\\\n    });\\\\\\\\n})\\\\\\\\n\\\\\\\\narr.push({\\\\\\\\n    col_type: 'line',\\\\\\\\n}, {\\\\\\\\n    col_type: 'big_blank_block',\\\\\\\\n}, {\\\\\\\\n    col_type: 'big_blank_block',\\\\\\\\n});\\\\\\\\n\\\\\\\\nlet page = pdfa(html, '.pagination&&li');\\\\\\\\nlet next = $('#noLoading#').lazyRule(() => {\\\\\\\\n    putMyVar(MY_URL, input);\\\\\\\\n    refreshPage(false);\\\\\\\\n    return 'hiker://empty';\\\\\\\\n});\\\\\\\\npage.forEach(data => {\\\\\\\\n    arr.push({\\\\\\\\n        title: /active/.test(data) ? setFont(pdfh(data, 'Text'), '#1E90FF') : pdfh(data, 'Text'),\\\\\\\\n        url: pd(data, 'a&&href') ? pd(data, 'a&&href') + next : 'hiker://empty',\\\\\\\\n        col_type: 'scroll_button',\\\\\\\\n        extra: {\\\\\\\\n            backgroundColor: /active/.test(data) ? '#E0F8FF' : ''\\\\\\\\n        }\\\\\\\\n    })\\\\\\\\n})\\\\\\\\n\\\\\\\\nsetResult(arr);\\\\\\\"},{\\\\\\\"col_type\\\\\\\":\\\\\\\"movie_3\\\\\\\",\\\\\\\"name\\\\\\\":\\\\\\\"免嗅\\\\\\\",\\\\\\\"path\\\\\\\":\\\\\\\"lazy\\\\\\\",\\\\\\\"rule\\\\\\\":\\\\\\\"let lazy = $('').lazyRule(() => {\\\\\\\\n    let book = input.split(\\\\\\\\\\\\\\\"play/\\\\\\\\\\\\\\\")[1].split(\\\\\\\\\\\\\\\"/\\\\\\\\\\\\\\\")[0];\\\\\\\\n    let chapter = input.split(\\\\\\\\\\\\\\\"/\\\\\\\\\\\\\\\")[input.split(\\\\\\\\\\\\\\\"/\\\\\\\\\\\\\\\").length - 1].split(\\\\\\\\\\\\\\\".html\\\\\\\\\\\\\\\")[0];\\\\\\\\n    let res = request(\\\\\\\\\\\\\\\"https://m.i275.com/pc/index/getChapterUrl?bookId=\\\\\\\\\\\\\\\" + book + \\\\\\\\\\\\\\\"&chapterId=\\\\\\\\\\\\\\\" + chapter);\\\\\\\\n    var s = JSON.parse(res).src.split(\\\\\\\\\\\\\\\"*\\\\\\\\\\\\\\\").map(item => String.fromCharCode(item)).join(\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\") + \\\\\\\\\\\\\\\"#isMusic=true#\\\\\\\\\\\\\\\";\\\\\\\\n    return s;\\\\\\\\n})\\\\\\\"}]\\\",\\n    \\\"proxy\\\": \\\"\\\",\\n    \\\"icon\\\": \\\"\\\"\\n}, {\\n    \\\"last_chapter_rule\\\": \\\"\\\",\\n    \\\"title\\\": \\\"博看听书\\\",\\n    \\\"author\\\": \\\"子丑寅卯\\\",\\n    \\\"version\\\": 2,\\n    \\\"type\\\": \\\"music\\\",\\n    \\\"url\\\": \\\"https://api.bookan.com.cn/voice/book/list?instance_id=25304&page=fypage&category_id=fyAll&num=24\\\",\\n    \\\"col_type\\\": \\\"movie_3\\\",\\n    \\\"class_name\\\": \\\"少年读物&儿童文学&国学经典&文艺少年&育儿心经&心理哲学\\\",\\n    \\\"class_url\\\": \\\"1305&1304&1320&1306&1309&1310\\\",\\n    \\\"area_name\\\": \\\"青春励志&历史小说&故事会\\\",\\n    \\\"area_url\\\": \\\"1307&1312&1303\\\",\\n    \\\"sort_name\\\": \\\"\\\",\\n    \\\"year_name\\\": \\\"音乐戏剧&相声评书\\\",\\n    \\\"sort_url\\\": \\\"\\\",\\n    \\\"year_url\\\": \\\"1317&1319\\\",\\n    \\\"find_rule\\\": \\\"js:\\\\r\\\\n\\\\r\\\\nvar d=[];\\\\r\\\\n\\\\nlet json=JSON.parse(getResCode()).data.list;\\\\nfor(let i of json){\\\\n    d.push({\\\\n        pic_url:i.cover,\\\\n        title:i.name,\\\\n        url:'https://api.bookan.com.cn/voice/album/units?album_id='+i.id+'&page=fypage&num=20&order=1'\\\\n    });\\\\n}\\\\nsetResult(d);\\\",\\n    \\\"searchFind\\\": \\\"js:\\\\r\\\\n\\\\r\\\\nvar d=[];\\\\r\\\\n\\\\nlet json=JSON.parse(getResCode()).data.list;\\\\nfor(let i of json){\\\\n    d.push({\\\\n        pic_url:i.cover,\\\\n        title:i.name,\\\\n        url:'https://api.bookan.com.cn/voice/album/units?album_id='+i.id+'&page=fypage&num=20&order=1'\\\\n    });\\\\n}\\\\nsetResult(d);\\\",\\n    \\\"search_url\\\": \\\"https://es.bookan.com.cn/api/v3/voice/book?instanceId=25304&keyword=**&pageNum=fypage&limitNum=20\\\",\\n    \\\"group\\\": \\\"#听书\\\",\\n    \\\"detail_col_type\\\": \\\"text_1\\\",\\n    \\\"detail_find_rule\\\": \\\"js:\\\\r\\\\n\\\\r\\\\nvar d=[];\\\\r\\\\n\\\\nlet json=JSON.parse(getResCode()).data.list;\\\\nfor(let i of json){\\\\n    d.push({\\\\n        title:i.title,\\\\n        desc:'创建于'+i.created_at+'\\\\\\\\n'+'更新于'+i.updated_at+'▶️',\\\\n        url:i.file\\\\n    });\\\\n}\\\\nsetResult(d);\\\",\\n    \\\"sdetail_col_type\\\": \\\"movie_1\\\",\\n    \\\"sdetail_find_rule\\\": \\\"*\\\",\\n    \\\"ua\\\": \\\"mobile\\\",\\n    \\\"preRule\\\": \\\"\\\",\\n    \\\"pages\\\": \\\"[]\\\",\\n    \\\"proxy\\\": \\\"\\\",\\n    \\\"icon\\\": \\\"\\\"\\n}, {\\n    \\\"last_chapter_rule\\\": \\\"\\\",\\n    \\\"title\\\": \\\"心理FM\\\",\\n    \\\"author\\\": \\\"Killer\\\",\\n    \\\"version\\\": 0,\\n    \\\"type\\\": \\\"music\\\",\\n    \\\"url\\\": \\\"http://m.xinli001.com/fm/list?flag=fypage\\\",\\n    \\\"col_type\\\": \\\"text_1\\\",\\n    \\\"class_name\\\": \\\"\\\",\\n    \\\"class_url\\\": \\\"\\\",\\n    \\\"area_name\\\": \\\"\\\",\\n    \\\"area_url\\\": \\\"\\\",\\n    \\\"sort_name\\\": \\\"\\\",\\n    \\\"year_name\\\": \\\"\\\",\\n    \\\"sort_url\\\": \\\"音频\\\",\\n    \\\"year_url\\\": \\\"\\\",\\n    \\\"find_rule\\\": \\\"js:\\\\nvar res = {};\\\\nvar d = [];\\\\nvar html = getResCode();\\\\nputVar(\\\\\\\"_x5\\\\\\\", $.toString(() => {\\\\n    var urls = _getUrls();\\\\n    for (var i in urls) {\\\\n        if (urls[i].match(/\\\\\\\\.mp3|\\\\\\\\.mp4|\\\\\\\\.m3u8/)) {\\\\n            fy_bridge_app.log(urls[i]);\\\\n            return urls[i].replace(/https.*url=/,'')\\\\n        }\\\\n    }\\\\n}))\\\\nvar lazy = \\\\\\\"@lazyRule=.js:showLoading('通用解析中，请稍候');'x5Rule://'+input+'@' + getVar('_x5')\\\\\\\";\\\\ntry{\\\\nvar list = pdfa(html,'.content&&li');\\\\nfor (var j in list) {\\\\n  d.push({\\\\n     title: pdfh(list[j], '.li-left-title&&Text'),\\\\n     desc:pdfh(list[j], '.li-left-b&&Text'),\\\\n     pic_url: parseDom(list[j], 'img&&src'),\\\\n     url: parseDom(list[j], 'a&&href')+lazy,extra: {id:parseDom(list[j],'a&&href'),blockRules: ['.m4a', '.mp3','.mp4','.m3u8','.flv','.avi','.3gp','.mpeg','.wmv','.mov','.rmvb','.gif','.jpg','.jpeg','.png','.ico','.svg']},//加快嗅探\\\\n  });\\\\n}}catch(e){}\\\\nres.data = d;\\\\nsetHomeResult(res);\\\",\\n    \\\"searchFind\\\": \\\"\\\",\\n    \\\"search_url\\\": \\\"\\\",\\n    \\\"group\\\": \\\"#听书\\\",\\n    \\\"detail_col_type\\\": \\\"movie_1\\\",\\n    \\\"detail_find_rule\\\": \\\"\\\",\\n    \\\"sdetail_col_type\\\": \\\"movie_1\\\",\\n    \\\"sdetail_find_rule\\\": \\\"\\\",\\n    \\\"ua\\\": \\\"auto\\\",\\n    \\\"preRule\\\": \\\"\\\",\\n    \\\"pages\\\": \\\"[]\\\",\\n    \\\"proxy\\\": \\\"\\\",\\n    \\\"icon\\\": \\\"\\\"\\n}, {\\n    \\\"last_chapter_rule\\\": \\\"\\\",\\n    \\\"title\\\": \\\"蜻蜓FM\\\",\\n    \\\"author\\\": \\\"\\\",\\n    \\\"version\\\": 0,\\n    \\\"type\\\": \\\"music\\\",\\n    \\\"url\\\": \\\"https://www.qingting.fm/radiopage/fyAll/fypage;get;utf-8;{User-Agent@Mozilla 5.0}\\\",\\n    \\\"col_type\\\": \\\"movie_2\\\",\\n    \\\"class_name\\\": \\\"浙江&北京&天津&河北&上海&山西&内蒙古&辽宁&吉林&黑龙江&江苏&安徽&福建&江西&山东&河南&湖北&湖南&广东&广西&海南&重庆&四川&贵州&云南&陕西&甘肃&宁夏&新疆&西藏&青海\\\",\\n    \\\"class_url\\\": \\\"99&3&5&7&83&19&31&44&59&69&85&111&129&139&151&169&187&202&217&239&254&257&259&281&291&316&327&351&357&308&342\\\",\\n    \\\"area_name\\\": \\\"资讯&音乐&交通&经济&文艺&都市&体育&双语&综合&生活&旅游&曲艺&方言\\\",\\n    \\\"area_url\\\": \\\"433&442&429&439&432&441&430&431&440&438&435&436&434\\\",\\n    \\\"sort_name\\\": \\\"\\\",\\n    \\\"year_name\\\": \\\"国家台&网络台\\\",\\n    \\\"sort_url\\\": \\\"\\\",\\n    \\\"year_url\\\": \\\"409&407\\\",\\n    \\\"find_rule\\\": \\\".contentSec&&.radio;span&&Text;img&&src;.descRadio&&Text!正在直播：;a&&href.js:input.replace('/radios/','http://lhttp.qingting.fm/live/')+'/64k.mp3'\\\",\\n    \\\"chapter_find\\\": \\\"\\\",\\n    \\\"movie_find\\\": \\\"\\\",\\n    \\\"searchFind\\\": \\\"\\\",\\n    \\\"search_url\\\": \\\"\\\",\\n    \\\"group\\\": \\\"#听书\\\",\\n    \\\"detail_col_type\\\": \\\"movie_1\\\",\\n    \\\"detail_find_rule\\\": \\\"\\\",\\n    \\\"sdetail_col_type\\\": \\\"movie_1\\\",\\n    \\\"sdetail_find_rule\\\": \\\"\\\",\\n    \\\"ua\\\": \\\"auto\\\",\\n    \\\"preRule\\\": \\\"\\\",\\n    \\\"pages\\\": \\\"[]\\\",\\n    \\\"proxy\\\": \\\"\\\",\\n    \\\"icon\\\": \\\"\\\"\\n}, {\\n    \\\"last_chapter_rule\\\": \\\"\\\",\\n    \\\"title\\\": \\\"播客\\\",\\n    \\\"author\\\": \\\"\\\",\\n    \\\"version\\\": 5,\\n    \\\"type\\\": \\\"music\\\",\\n    \\\"url\\\": \\\"hiker://empty\\\",\\n    \\\"col_type\\\": \\\"movie_3\\\",\\n    \\\"class_name\\\": \\\"\\\",\\n    \\\"class_url\\\": \\\"\\\",\\n    \\\"area_name\\\": \\\"\\\",\\n    \\\"area_url\\\": \\\"\\\",\\n    \\\"sort_name\\\": \\\"\\\",\\n    \\\"year_name\\\": \\\"\\\",\\n    \\\"sort_url\\\": \\\"\\\",\\n    \\\"year_url\\\": \\\"\\\",\\n    \\\"find_rule\\\": \\\"js:\\\\nlet d = [];\\\\nlet Color = \\\\\\\"#f13b66a\\\\\\\";\\\\nlet html = request(\\\\\\\"https://getpodcast.xyz/\\\\\\\");\\\\n//log(html)\\\\nlet class_ids = pdfa(html, \\\\\\\"body&&.classify_title\\\\\\\");\\\\nlet classlists = pdfa(html, \\\\\\\"body&&.pic_list\\\\\\\");\\\\nlet classname0 = \\\\\\\"订阅中心\\\\\\\";\\\\nlet selclass = getItem('SrcBoKe$classname', '播客');\\\\nd.push({\\\\n    title: selclass === classname0 ? '““””<b><span style=\\\\\\\"color:' + Color + '\\\\\\\">' + classname0 + '</span></b>' : classname0,\\\\n    url: $('#noLoading#').lazyRule((classname) => {\\\\n        setItem('SrcBoKe$classname', classname);\\\\n        setItem('SrcBoKe$classid', classname);\\\\n        refreshPage(false);\\\\n        return \\\\\\\"hiker://empty\\\\\\\";\\\\n    }, classname0),\\\\n    col_type: 'scroll_button'\\\\n});\\\\n\\\\nfor (let i in class_ids) {\\\\n    let classname = pdfh(class_ids[i], \\\\\\\"body&&Text\\\\\\\");\\\\n    d.push({\\\\n        title: selclass === classname ? '““””<b><span style=\\\\\\\"color:' + Color + '\\\\\\\">' + classname + '</span></b>' : classname,\\\\n        url: $('#noLoading#').lazyRule((classname, i) => {\\\\n            setItem('SrcBoKe$classname', classname);\\\\n            setItem('SrcBoKe$classid', i);\\\\n            refreshPage(false);\\\\n            return \\\\\\\"hiker://empty\\\\\\\";\\\\n        }, classname, i),\\\\n        col_type: 'scroll_button'\\\\n    });\\\\n}\\\\nif (selclass == classname0) {\\\\n    //订阅中心\\\\n    let {\\\\n        load\\\\n    } = $.require(\\\\\\\"hiker://page/data\\\\\\\");\\\\n    let data = load();\\\\n    for (let it of data) {\\\\n        d.push({\\\\n            title: it.name,\\\\n            url: \\\\\\\"hiker://empty##\\\\\\\" + it.url,\\\\n            img: it.pic,\\\\n            desc: '0',\\\\n            col_type: 'card_pic_3',\\\\n            extra: {\\\\n                title: it.name,\\\\n                pic: it.pic\\\\n            }\\\\n        });\\\\n    }\\\\n\\\\n} else {\\\\n    let id = getItem('SrcBoKe$classid', '0');\\\\n    let lists = pdfa(classlists[Math.floor(id)], \\\\\\\"body&&li\\\\\\\");\\\\n    lists.forEach(item => {\\\\n        try {\\\\n            d.push({\\\\n                title: pdfh(item, \\\\\\\".title&&Text\\\\\\\"),\\\\n                url: \\\\\\\"hiker://empty##\\\\\\\" + pdfh(item, \\\\\\\"a&&href\\\\\\\"),\\\\n                img: pdfh(item, \\\\\\\".pic&&img&&src\\\\\\\"),\\\\n                desc: '0',\\\\n                col_type: 'card_pic_3',\\\\n                extra: {\\\\n                    title: pdfh(item, \\\\\\\".title&&Text\\\\\\\"),\\\\n                    pic: pdfh(item, \\\\\\\".pic&&img&&src\\\\\\\")\\\\n                }\\\\n            });\\\\n        } catch (e) {\\\\n            //log(e.message)\\\\n        }\\\\n    })\\\\n}\\\\n\\\\nsetResult(d);\\\",\\n    \\\"searchFind\\\": \\\"\\\",\\n    \\\"search_url\\\": \\\"\\\",\\n    \\\"group\\\": \\\"#听书\\\",\\n    \\\"detail_col_type\\\": \\\"movie_3\\\",\\n    \\\"detail_find_rule\\\": \\\"js:\\\\nlet d = [];\\\\n//setPageTitle(MY_PARAMS.title);\\\\nMY_URL = MY_URL.split('##')[1];\\\\nlet {\\\\n    has\\\\n} = $.require(\\\\\\\"hiker://page/data\\\\\\\");\\\\nlet has0 = has(MY_PARAMS.title);\\\\nd.push({\\\\n    title: (has0 ? \\\\\\\"取消\\\\\\\" : \\\\\\\"\\\\\\\") + \\\\\\\"订阅该播客\\\\\\\",\\\\n    url: $(\\\\\\\"#noLoading#\\\\\\\").lazyRule((item, has0) => {\\\\n        let {\\\\n            add,\\\\n            remove\\\\n        } = $.require(\\\\\\\"hiker://page/data\\\\\\\");\\\\n        if (has0) {\\\\n            remove(item.name);\\\\n        } else {\\\\n            add(item)\\\\n        }\\\\n        refreshPage();\\\\n        return \\\\\\\"toast://OK\\\\\\\"\\\\n    }, {\\\\n        name: MY_PARAMS.title,\\\\n        url: MY_URL,\\\\n        pic: MY_PARAMS.pic\\\\n    }, has0),\\\\n    col_type: \\\\\\\"avatar\\\\\\\",\\\\n    desc: \\\\\\\"\\\\\\\",\\\\n    pic_url: MY_PARAMS.pic\\\\n});\\\\nlet html = request(MY_URL);\\\\nlet lists = pdfa(html, \\\\\\\"body&&item\\\\\\\");\\\\n//log(lists)\\\\nlists.forEach(item => {\\\\n    try {\\\\n        d.push({\\\\n            title: item.match(/<title>(.*?)<\\\\\\\\/title>/)[1].replace(/&lt;!\\\\\\\\[CDATA\\\\\\\\[|\\\\\\\\]\\\\\\\\]&gt;|<!\\\\\\\\[CDATA\\\\\\\\[|\\\\\\\\]\\\\\\\\]>/g, ''),\\\\n            desc: pdfh(item, \\\\\\\"pubDate&&Text\\\\\\\"),\\\\n            url: pdfh(item, \\\\\\\"enclosure&&url\\\\\\\"),\\\\n            img: item.indexOf('image href=') == -1 ? MY_PARAMS.pic : item.match(/image href=\\\\\\\"(.*?)\\\\\\\"/)[1],\\\\n            col_type: 'movie_1_left_pic'\\\\n        })\\\\n    } catch (e) {\\\\n\\\\n    }\\\\n})\\\\nif (d.length == 0) {\\\\n    d.push({\\\\n        title: '↻未获取到列表',\\\\n        col_type: \\\\\\\"rich_text\\\\\\\"\\\\n    });\\\\n}\\\\nsetResult(d);\\\",\\n    \\\"sdetail_col_type\\\": \\\"movie_1\\\",\\n    \\\"sdetail_find_rule\\\": \\\"*\\\",\\n    \\\"ua\\\": \\\"pc\\\",\\n    \\\"preRule\\\": \\\"\\\",\\n    \\\"pages\\\": \\\"[{\\\\\\\"col_type\\\\\\\":\\\\\\\"movie_3\\\\\\\",\\\\\\\"name\\\\\\\":\\\\\\\"数据管理\\\\\\\",\\\\\\\"path\\\\\\\":\\\\\\\"data\\\\\\\",\\\\\\\"rule\\\\\\\":\\\\\\\"$.exports = {\\\\\\\\n    load: function() {\\\\\\\\n        return storage0.getItem(\\\\\\\\\\\\\\\"data\\\\\\\\\\\\\\\", []);\\\\\\\\n    },\\\\\\\\n    has: function(name) {\\\\\\\\n        let data = storage0.getItem(\\\\\\\\\\\\\\\"data\\\\\\\\\\\\\\\", []);\\\\\\\\n        return data.filter(it => it.name == name).length > 0;\\\\\\\\n    },\\\\\\\\n    add: function(item) {\\\\\\\\n        let data = storage0.getItem(\\\\\\\\\\\\\\\"data\\\\\\\\\\\\\\\", []);\\\\\\\\n        for (let it of data) {\\\\\\\\n            if (it.name == item.name) {\\\\\\\\n                return\\\\\\\\n            }\\\\\\\\n        }\\\\\\\\n        data.push(item);\\\\\\\\n        storage0.setItem(\\\\\\\\\\\\\\\"data\\\\\\\\\\\\\\\", data);\\\\\\\\n    },\\\\\\\\n    remove: function(name) {\\\\\\\\n        let data = storage0.getItem(\\\\\\\\\\\\\\\"data\\\\\\\\\\\\\\\", []);\\\\\\\\n        data = data.filter(it => it.name != name);\\\\\\\\n        storage0.setItem(\\\\\\\\\\\\\\\"data\\\\\\\\\\\\\\\", data);\\\\\\\\n    }\\\\\\\\n}\\\\\\\"}]\\\",\\n    \\\"proxy\\\": \\\"\\\",\\n    \\\"icon\\\": \\\"https://getpodcast.xyz/favicon.ico\\\"\\n}]\"}]","icon":"hiker://files/zf/img/heji.png","proxy":""}