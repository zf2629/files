海阔视界规则分享，当前分享的是：小程序￥home_rule_v2￥base64://@追忆影视APP@{"last_chapter_rule":"","title":"追忆影视APP","author":"zhao","url":"hiker://empty##fypage","version":1,"col_type":"movie_3","class_name":"","type":"video","class_url":"","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:\nvar {\n    apiview,\n    tuijian,\n    fenlei1,\n    paihang\n} = $.require(\"hanshu\");\nvar d = [];\nvar page = MY_PAGE;\nvar tindex = storage0.getMyVar(\"tindex\", 0);\nvar titles = [\"首页\", \"分类\", \"排行\"];\nvar imgs = [\"https://icdn.binmt.cc/2504/680727aa1a8fc.png\", \"https://icdn.binmt.cc/2504/680727aa1a8fc.png\", \"https://icdn.binmt.cc/2504/680727aa1a8fc.png\"];\ntitles = titles.map((title, index) => index == tindex ? apiview.color(\"#90EE90\" ,title) : title);\nif (page == 1) {\n    for (var i = 0; i < titles.length; i++) {\n        d.push({\n            title: titles[i],\n            img: imgs[i],\n            url: $(\"#noLoading#\").lazyRule((i) => {\n                storage0.putMyVar(\"tindex\", i);\n                refreshPage();\n                return \"hiker://empty\";\n            }, i),\n            col_type: \"icon_small_3\"\n        })\n    }\n    d.push({\n        img: \"https://icdn.binmt.cc/2504/680728df4f639.png\",\n        url: \"hiker://empty\",\n        col_type: \"pic_1_full\"\n    })\n}\ntry{\nswitch (parseInt(tindex)) {\n    case 0:\n        if (page == 1) {\n            tuijian(d)\n        }\n        break;\n    case 1:\n        fenlei1(d)\n        break;\n    case 2:\n        if (page == 1) {\n            paihang(d)\n        }\n        break;\n}\n}catch(e){\n    log(e.message)\n}\nsetResult(d)","search_url":"hiker://empty##**##fypage","group":"B影视","searchFind":"js:\nvar {\n    search\n} = $.require(\"hanshu\");\nvar d = []\nvar word = MY_URL.split(\"##\")[1]\nvar page = MY_URL.split(\"##\")[2]\ntry{\n    search(word, page)\n}catch(e){\n    log(e.message)\n}\nsetResult(d)","detail_col_type":"movie_1","detail_find_rule":"","sdetail_col_type":"movie_1","sdetail_find_rule":"","ua":"mobile","preRule":"$.require(\"hanshu\").configs()","pages":"[{\"col_type\":\"movie_3\",\"name\":\"函数\",\"path\":\"hanshu\",\"rule\":\"const host1 = getMyVar(\\\"host\\\")\\nconst key1 = getMyVar(\\\"key\\\")\\nconst header1 = {\\n    \\\"version\\\": \\\"2.0.0\\\",\\n    \\\"ua\\\": md5(getMyVar(\\\"ua\\\"))+\\\"0000000000000000\\\"+md5(\\\"a.\\\"+String(Math.floor(new Date().getTime())))\\n}\\nconst tubiao1 = \\\"https://icdn.binmt.cc/2504/680727aa1a8fc.png\\\"\\n\\nfunction aesecbde(word, keyy) {\\n    const CryptoUtil = $.require(\\\"hiker://assets/crypto-java.js\\\");\\n    let key = CryptoUtil.Data.parseUTF8(keyy);\\n    let decrypted = CryptoUtil.AES.decrypt(word, key, {\\n        mode: \\\"AES/ECB/PKCS7Padding\\\"\\n    });\\n    return decrypted.toString()\\n}\\n\\nfunction aesecben(word, keyy) {\\n    const CryptoUtil = $.require(\\\"hiker://assets/crypto-java.js\\\");\\n    let key = CryptoUtil.Data.parseUTF8(keyy);\\n    let encrypted = CryptoUtil.AES.encrypt(word, key, {\\n        mode: \\\"AES/ECB/PKCS7Padding\\\"\\n    });\\n    return encrypted.toString()\\n}\\n\\nfunction req1(url1, body1) {\\n    var html1 = request(host1+url1, {\\n        headers: header1,\\n        body: body1,\\n        method: \\\"POST\\\"\\n    }); //log(html1)\\n    return JSON.parse(aesecbde(html1, key1))\\n}\\n\\nfunction req2(url1, keyy) {\\n    var html1 = request(url1, {\\n        headers: header1,\\n        method: \\\"GET\\\"\\n    }); //log(html1)\\n    return JSON.parse(aesecbde(html1, keyy))\\n}\\n\\nfunction configs() {\\n    if(getMyVar('host','0') == '0'){\\n        try{\\n            var host = req2(\\\"https://vip.123pan.cn/1848451100/zl/zy.txt\\\", \\\"rectangleadsadxa\\\")[0]; log(host)\\n            var html1 = request(host+'/shark/api.php?action=configs', {\\n                headers: header1,\\n                body: 'username=&token=',\\n                method: 'POST'\\n            }); //log(html1)\\n            var data = JSON.parse(aesecbde(html1.replace(/<.*>/g, '').replace(/\\\\n/g, ''), \\\"aassddwwxxllsx1x\\\")); //log(data)\\n            \\n            putMyVar('host',host)\\n            putMyVar('dmUrl',data.config.dmUrl)\\n            putMyVar('hulue',data.config.hulue.split('&')[0])\\n            putMyVar(\\\"ua\\\",data.config.ua)\\n            putMyVar(\\\"key\\\",(md5(aesecbde(data.config.hult, data.config.hulue.split('&')[0])).substring(0,16)))\\n            storage0.putMyVar('playerinfos',data.playerinfos)\\n            \\n        }catch(e){\\n            log(e.message)\\n        }\\n    }\\n}\\n\\nfunction List1(d, list) {\\n    list.forEach(item => {\\n        d.push({\\n            title: item.vod_name,\\n            desc: item.vod_remarks,\\n            pic_url: item.vod_pic,\\n            url: rule1(item.vod_id),\\n            col_type: \\\"movie_3\\\",\\n            extra: {\\n                pageTitle: item.vod_name\\n            }\\n        })\\n    })\\n}\\n\\nfunction fenlei(d, data, url) {\\n    for(let a of data){\\n        d.push({\\n            title: a.split(\\\"#\\\")[1] == getMyVar(url,\\\"1\\\") ? apiview.colorr(\\\"#90EE90\\\", a.split(\\\"#\\\")[0]) : a.split(\\\"#\\\")[0],\\n            url: $(\\\"#noLoading#\\\").lazyRule((a, url)=>{\\n                putMyVar(url,a.split(\\\"#\\\")[1]);\\n                refreshPage();\\n                return \\\"hiker://empty\\\"\\n            }, a, url),\\n            col_type: \\\"scroll_button\\\"\\n        })\\n    }\\n}\\n\\nfunction tuijian(d) {\\n    var list1 = req2(host1+\\\"/api.php/v1.home/data?type_id=20\\\", key1).data.verLandList\\n    list1.forEach(item1 => {\\n        d.push({\\n            title: item1.type_name,\\n            img: tubiao1,\\n            url: \\\"hiker://empty\\\",\\n            col_type: \\\"avatar\\\"\\n        })\\n        item1.vertical_lands.forEach(item2 => {\\n            d.push({\\n                title: item2.vod_name,\\n                desc : item2.vod_remarks,\\n                pic_url: item2.vod_pic,\\n                url: rule1(item2.vod_id),\\n                col_type: \\\"movie_2\\\"\\n            })\\n        })\\n    })\\n}\\n\\nfunction fenlei1(d) {\\n    if (page == 1) {\\n        fenlei(d, [\\\"电视剧#1\\\", \\\"电影#2\\\", \\\"动漫#3\\\", \\\"综艺#4\\\", \\\"短剧#5\\\", \\\"直播#17\\\"], \\\"type_id\\\")\\n    }\\n    var list1 = req1(\\\"/api.php/v1.classify/content?page=\\\"+page, JSON.stringify({\\\"area\\\":\\\"全部地区\\\",\\\"lang\\\":\\\"全部语言\\\",\\\"rank\\\":\\\"最新\\\",\\\"type\\\":\\\"全部类型\\\",\\\"type_id\\\":getMyVar(\\\"type_id\\\", \\\"1\\\"),\\\"year\\\":\\\"全部年代\\\"})).data.video_list\\n    List1(d, list1)\\n}\\n\\nfunction paihang(d) {\\n    fenlei(d, [\\\"电视剧#1\\\", \\\"电影#2\\\", \\\"动漫#3\\\", \\\"综艺#4\\\", \\\"短剧#5\\\", \\\"直播#17\\\"], \\\"rank\\\")\\n    var list1 = req2(host1+\\\"/api.php/v1.rank/RankData?page=1&type_id=\\\"+getMyVar(\\\"rank\\\", \\\"1\\\"), key1).data.videos\\n    list1.forEach(item => {\\n        d.push({\\n            title: item.vod_name,\\n            pic_url: item.vod_pic,\\n            url: rule1(item.vod_id),\\n            col_type: \\\"movie_2\\\"\\n        })\\n    })\\n}\\n\\nfunction rule1(vod_id) {\\n    return $(\\\"hiker://empty#\\\"+vod_id+\\\"#immersiveTheme#\\\").rule(() => {\\n        $.require(\\\"hanshu\\\").erji(MY_URL.split(\\\"#\\\")[1])\\n    })\\n}\\n\\nfunction erji(vod_id) {\\n    var d = []\\n    try{\\n    var data1 = req2(host1+\\\"/api.php/v1.player/details?vod_id=\\\"+vod_id, key1).data\\n    var detail = data1.detail\\n    d.push({\\n        title: detail.vod_name+\\\"\\\\n\\\"+detail.vod_actor,\\n        desc: detail.vod_class+\\\"\\\\n\\\"+detail.vod_remarks,\\n        pic_url: detail.vod_pic,\\n        url: \\\"hiker://empty\\\",\\n        col_type: \\\"movie_1_vertical_pic_blur\\\",\\n        extra: {\\n            gradient: true\\n        }\\n    })\\n    setDesc(d, detail.vod_content.replace(/[<p>|</p>]/g, \\\"\\\"))\\n    \\n    var tab1 = []\\n    var list1 = []\\n    detail.play_url_list.map(item => {\\n        tab1.push(item.from)\\n        list1.push(item.urls)\\n    })\\n    var lazy1 = $(\\\"\\\").lazyRule((tab1) => {\\n        var {\\n            header1,\\n            aesecbde\\n        } = $.require(\\\"hanshu\\\")\\n        // 根据 playername 获取对应的 playerjiekou\\n        function getPlayerJiekou(playername) {\\n            const playerInfo = storage0.getMyVar('playerinfos').find(item => item.playername === playername);\\n            return playerInfo\\n        }\\n        var parse = tab1[getMyVar(\\\"xianluindex\\\", '0')]; //log(parse)\\n        if (parse.includes(\\\"zhibo\\\")) return input+\\\"#isVideo=true#\\\"\\n        var jiekou = getPlayerJiekou(parse).playerjiekou; //log(jiekou)\\n        var parsee = aesecbde(jiekou, getMyVar('hulue')); //log(parsee)\\n        if (parsee == \\\"\\\") return input+\\\"#isVideo=true#\\\"\\n        if (parsee.includes(\\\"http\\\")) {\\n            var html1 = JSON.parse(request(parsee+input)); //log(html1)\\n            var play = html1.url\\n            if (play === undefined) return \\\"hiker://empty\\\"\\n            if ([\\\"NBY\\\"].includes(parse)) {\\n                if (play.includes(\\\".mp4\\\")) {\\n                    var play = request(play, {\\n                        redirect:false,\\n                        onlyHeaders:true\\n                    }); //log(play)\\n                    return JSON.parse(play).headers.location[0]+\\\"#isVideo=true#\\\"\\n                }\\n                writeFile(\\\"hiker://files/cache/video.m3u8\\\", request(play))\\n                return getPath(\\\"hiker://files/cache/video.m3u8\\\")+\\\"#\\\"+play\\n            }\\n            if ([\\\"QD4K\\\"].includes(parse)) {\\n                if (play.includes(\\\"m3u8\\\")) {\\n                    var play = request(play, {\\n                        redirect:false,\\n                        onlyHeaders:true\\n                    }); //log(play)\\n                    return JSON.parse(play).headers.location[0]+\\\"#isVideo=true#\\\"\\n                }\\n            }\\n            if (play) return play+\\\"#isVideo=true#\\\"\\n            return \\\"hiker://empty\\\"\\n        }\\n        var html1 = request(getMyVar(\\\"host\\\")+\\\"/shark/api.php?action=parsevod\\\", {\\n            headers: header1,\\n            body: \\\"parse=\\\"+parsee+\\\"&url=\\\"+input+\\\"&matching=\\\",\\n            method: \\\"POST\\\"\\n        }); //log(html1)\\n        var play = JSON.parse(aesecbde(html1.replace(/<.*>/g, '').replace(/\\\\n/g, ''), getMyVar(\\\"key\\\"))).url\\n        if (play) return play+\\\"#isVideo=true#\\\"\\n        return \\\"hiker://empty\\\"\\n    }, tab1)\\n    eval(JSON.parse(request('hiker://page/erjihanshu')).rule)\\n    \\n    d.push({\\n        title: \\\"猜你喜欢\\\",\\n        pic_url: \\\"https://icdn.binmt.cc/2504/680727aa1a8fc.png\\\",\\n        url: \\\"hiker://empty\\\",\\n        col_type: \\\"avatar\\\"\\n    })\\n    List1(d, data1.likes.like_video.slice(0,6))\\n    } catch (e) {\\n        log(e.message)\\n    }\\n    setResult(d)\\n}\\n\\nfunction search(word, page) {\\n    var list1 = req2(host1+\\\"/api.php/v1.search/data?wd=\\\"+word+\\\"&type_id=0&page=\\\"+page, key1).data.search_data\\n    list1.forEach(item => {\\n        d.push({\\n            title: item.vod_name,\\n            content: item.vod_blurb,\\n            desc: item.vod_remarks,\\n            pic_url: item.vod_pic,\\n            url: rule1(item.vod_id)\\n        })\\n    })\\n}\\n\\nconst apiview = {\\n    color: (yanse, test) => {\\n        return '<font color='+yanse+'>' + test + '</front>';\\n    },\\n    colorr: (yanse, test) => {\\n        return '‘‘’’<font color=\\\"'+yanse+'\\\">'+test+'</font>';\\n    },\\n    strong: (test) => {\\n        return '<strong>' + test + '</strong>';\\n    },\\n    small: (test) => {\\n        return '<small>' + test + '</small>';\\n    },\\n    center: (test) => {\\n        return '<p style=\\\"text-align: center;\\\">' + test + '</p>'\\n    },\\n    big: (test) => {\\n        return '<big>' + test + '</big>';\\n    },\\n    grey: (text) => {\\n        return \\\"<font color='grey'>\\\" + text + \\\"</font>\\\";\\n\\n    },\\n    gray: (test) => {\\n        return \\\"<font color='gray'>\\\" + test + \\\"</font>\\\";\\n    },\\n    rich: (test) => {\\n        return \\\"‘‘’’\\\" + test;\\n    },\\n    addressTag: (url, text) => {\\n        return \\\"<a href='\\\" + url + \\\"'>\\\" + text + \\\"</a>\\\"\\n    }\\n}\\n\\nfunction setDesc(d, desc, num) {\\n    //log(desc)\\n    if (desc == undefined) {\\n        return;\\n    }\\n    desc = desc.constructor == Array ? desc.join('<br>') : desc;\\n    if (desc.replace(/(<br>|\\\\s+|<\\\\/?p>|&nbsp;)/g, '').length == 0) {\\n        return;\\n    }\\n    const mark = 'desc';\\n    num = typeof(num) == 'undefined' ? 45 : num\\n    desc = desc.startsWith('　　') ? desc : '　　' + desc;\\n    desc = desc.replace(/'/g, \\\"&#39;\\\");\\n    desc = desc.replace(/\\\\r\\\\n/g, \\\"<br>\\\");\\n    desc = desc.replace(/\\\\r/g, \\\"<br>\\\");\\n    desc = desc.replace(/\\\\n/g, \\\"<br>\\\");\\n\\n    function substr(str, maxLength) {\\n        let len = 0;\\n        for (let i = 0; i < str.length; i++) {\\n            if (str.charCodeAt(i) > 255) {\\n                len += 2;\\n            } else {\\n                len++;\\n            }\\n            if (len > maxLength) {\\n                return str.slice(0, i) + '...';\\n            }\\n        }\\n        return str;\\n    }\\n    let sdesc = substr(desc, num);\\n    var colors = {\\n        show: \\\"black\\\",\\n        hide: \\\"grey\\\"\\n    }\\n    var lazy = $(`#noLoading#`).lazyRule((dc, sdc, m, cs) => {\\n        var show = storage0.getItem(m, '0');\\n        var title = findItem('desc').title;\\n        var re = /(<\\\\/small><br>.*?>).+/g;\\n        var exp = '展开:';\\n        var ret = '收起:';\\n        if (show == '1') {\\n            updateItem('desc', {\\n                title: title\\n                    .replace(ret, exp)\\n                    .replace(re, '$1' + sdc + '</small>')\\n                    .replace(/(<\\\\/small><br>\\\\<font color=\\\").*?(\\\">)/, '$1' + cs.hide + '$2')\\n            })\\n            storage0.setItem(m, '0');\\n        } else {\\n            updateItem('desc', {\\n                title: title\\n                    .replace(exp, ret)\\n                    .replace(re, '$1' + dc + '</small>')\\n                    .replace(/(<\\\\/small><br>\\\\<font color=\\\").*?(\\\">)/, '$1' + cs.show + '$2')\\n            })\\n            storage0.setItem(m, '1');\\n        }\\n        return `hiker://empty`\\n    }, desc, sdesc, mark, colors)\\n    var sc = storage0.getItem(mark, '0') == '0' ? '展开:' : '收起:';\\n    var dc = storage0.getItem(mark, '0') == '0' ? sdesc : desc;\\n    var cs = storage0.getItem(mark, '0') == '0' ? colors.hide : colors.show;\\n    d.push({\\n        title: '' + '<b><font color=\\\"#098AC1\\\">∷剧情简介\\t</font></b>' + \\\"<small><a style='text-decoration: none;' href='\\\" + lazy + \\\"'>\\\" + sc + '</a></small><br><font color=\\\"' + cs + '\\\">' + `${dc}` + '</small>',\\n        col_type: 'rich_text',\\n        extra: {\\n            id: 'desc',\\n            lineSpacing: 6,\\n            textSize: 15,\\n            lineVisible: true,\\n        }\\n    })\\n}\\n\\n$.exports = {\\n    header1,\\n    tuijian,\\n    fenlei1,\\n    paihang,\\n    erji,\\n    search,\\n    aesecbde,\\n    configs,\\n    apiview\\n}\"},{\"col_type\":\"movie_3\",\"name\":\"二级函数\",\"path\":\"erjihanshu\",\"rule\":\"var tabs = tab1\\nvar lists = list1\\nvar lazy = lazy1\\n\\naddListener(\\\"onClose\\\", $.toString(() => {\\n    clearMyVar(\\\"lists\\\");\\n}));\\nstorage0.putMyVar(\\\"lists\\\", lists);\\nvar list = lists[getMyVar(MY_URL, '0')];\\nvar 排序 = getMyVar(MY_URL + \\\"章节排序\\\", '#1aad19\\\">正序');\\nvar 提示 = 排序 == '#FF0000\\\">倒序' ? '#1aad19\\\">正序' : '#FF0000\\\">倒序';\\nvar 排序名 = '““””<b><span style=\\\"color:排序</span></b>';\\n\\nd.push({\\n    title: '““””<b><span style=\\\"color: ' + 排序 + '</span></b>',\\n    url: $(\\\"#noLoading#\\\").lazyRule((tabs, 排序名, lazy, d, TV推送) => {\\n        var lists = storage0.getMyVar(\\\"lists\\\");\\n        var 章节 = lists[getMyVar(MY_URL, '0')];\\n        var 排序 = getMyVar(MY_URL + \\\"章节排序\\\", '#1aad19\\\">正序');\\n        var 提示 = 排序 == '#FF0000\\\">倒序' ? '#1aad19\\\">正序' : '#FF0000\\\">倒序';\\n        updateItem({\\n            extra: {\\n                id: MY_URL + \\\"_排序\\\",\\n                longClick: [{\\n                    title: \\\"TVbox推送\\\",\\n                    js: TV推送(tabs, lists, d)\\n                }]\\n            },\\n            title: 排序名.replace('排序', 提示)\\n        });\\n        if (排序 == '#1aad19\\\">正序') {\\n            章节.reverse();\\n        }\\n        let cp = 章节.map((data, ssid) => ({\\n            title: data.name,\\n            url: data.url + lazy,\\n            col_type: 章节.length > 3 ? 'text_4' : 'text_2',\\n            extra: {\\n                cls: MY_URL + \\\"_选集\\\",\\n                id: data.url\\n            }\\n        }));\\n        deleteItemByCls(MY_URL + \\\"_选集\\\");\\n        addItemBefore(MY_URL + \\\"footer\\\", cp);\\n        putMyVar(MY_URL + \\\"章节排序\\\", 提示);\\n        return \\\"hiker://empty\\\";\\n    }, tabs, 排序名, lazy, d[0], TV推送),\\n    col_type: 'flex_button',\\n    extra: {\\n        id: MY_URL + \\\"_排序\\\",\\n        longClick: [{\\n            title: \\\"TVbox推送\\\",\\n            js: TV推送(tabs, lists, d[0])\\n        }]\\n    }\\n});\\n\\nfunction TV推送(tabs, lists, d) {\\n    return $.toString((tabs, lists, d) => {\\n        var 推送 = {\\n            \\\"name\\\": getPageTitle(),\\n            \\\"content\\\": d.desc,\\n            \\\"pic\\\": d.img || d.pic_url,\\n            \\\"from\\\": tabs.join('$$$'),\\n            \\\"url\\\": storage0.getMyVar(\\\"lists\\\").map(li => li.map(li1 => li1.name + '$' + li1.url).join('#')).join('$$$')\\n        };\\n        return \\\"hiker://page/push?rule=XYQ推送&pushurl=\\\" + encodeURIComponent(JSON.stringify(推送));\\n    }, tabs, lists, d);\\n}\\n\\ntabs.forEach((data, id) => {\\n    d.push({\\n        title: getMyVar(MY_URL, '0') == id ? `““${data}””` : data,\\n        url: $(\\\"#noLoading#\\\").lazyRule((线路, lazy, id) => {\\n            var lists = storage0.getMyVar(\\\"lists\\\");\\n            var 排序 = getMyVar(MY_URL + \\\"章节排序\\\", '#1aad19\\\">正序');\\n            var 提示 = 排序 == '#FF0000\\\">倒序' ? '#1aad19\\\">正序' : '#FF0000\\\">倒序';\\n            线路.forEach((data, xlid) => {\\n                updateItem({\\n                    title: id == xlid ? `““${data}””` : data,\\n                    extra: {\\n                        id: MY_URL + \\\"_线路\\\" + xlid\\n                    }\\n                });\\n            })\\n            putMyVar(MY_URL, id)\\n            putMyVar(\\\"xianluindex\\\", id)\\n            var 章节 = lists[getMyVar(MY_URL, '0')];\\n            if (排序 == '#FF0000\\\">倒序') {\\n                章节.reverse()\\n            }\\n            let cp = 章节.map((data, ssid) => {\\n                return {\\n                    title: data.name,\\n                    url: data.url + lazy,\\n                    col_type: 章节.length > 3 ? 'text_4' : 'text_2',\\n                    extra: {\\n                        cls: MY_URL + \\\"_选集\\\",\\n                        id: data.url\\n                    }\\n                };\\n            });\\n            deleteItemByCls(MY_URL + \\\"_选集\\\");\\n            addItemBefore(MY_URL + \\\"footer\\\", cp);\\n            return \\\"hiker://empty\\\"\\n        }, tabs, lazy, id),\\n        col_type: 'flex_button',\\n        extra: {\\n            id: MY_URL + \\\"_线路\\\" + id\\n        }\\n    });\\n})\\n\\nif (排序 == '#FF0000\\\">倒序') {\\n    list.reverse()\\n}\\nlist.forEach((data, id) => {\\n    d.push({\\n        title: data.name,\\n        url: data.url + lazy,\\n        col_type: list.length > 3 ? 'text_4' : 'text_2',\\n        extra: {\\n            cls: MY_URL + \\\"_选集\\\",\\n            id: data.url\\n        }\\n    });\\n})\\n\\nsetLastChapterRule('js:' + $.toString((play_url_list) => {\\n    setResult('更新至: 第' + play_url_list.map(item => item.urls.length).sort((a, b) => b - a)[0] + \\\"集\\\");\\n}, detail.play_url_list));\\n\\nd.push({\\n    col_type: \\\"big_blank_block\\\",\\n    extra: {\\n        id: MY_URL + \\\"footer\\\"\\n    }\\n});\"}]","icon":"data:image/png;base64,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","proxy":""}